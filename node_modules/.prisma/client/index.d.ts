
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model customers
 * 
 */
export type customers = {
  customerNumber: number
  customerName: string
  contactLastName: string
  contactFirstName: string
  phone: string
  addressLine1: string
  addressLine2: string | null
  city: string
  state: string | null
  postalCode: string | null
  country: string
  salesRepEmployeeNumber: number | null
  creditLimit: Prisma.Decimal | null
}

/**
 * Model employees
 * 
 */
export type employees = {
  employeeNumber: number
  lastName: string
  firstName: string
  extension: string
  email: string
  officeCode: string
  reportsTo: number | null
  jobTitle: string
}

/**
 * Model offices
 * 
 */
export type offices = {
  officeCode: string
  city: string
  phone: string
  addressLine1: string
  addressLine2: string | null
  state: string | null
  country: string
  postalCode: string
  territory: string
}

/**
 * Model orderdetails
 * 
 */
export type orderdetails = {
  orderNumber: number
  productCode: string
  quantityOrdered: number
  priceEach: Prisma.Decimal
  orderLineNumber: number
}

/**
 * Model orders
 * 
 */
export type orders = {
  orderNumber: number
  orderDate: Date
  requiredDate: Date
  shippedDate: Date | null
  status: string
  comments: string | null
  customerNumber: number
}

/**
 * Model payments
 * 
 */
export type payments = {
  customerNumber: number
  checkNumber: string
  paymentDate: Date
  amount: Prisma.Decimal
}

/**
 * Model productlines
 * 
 */
export type productlines = {
  productLine: string
  textDescription: string | null
  htmlDescription: string | null
  image: Buffer | null
}

/**
 * Model products
 * 
 */
export type products = {
  productCode: string
  productName: string
  productLine: string
  productScale: string
  productVendor: string
  productDescription: string
  quantityInStock: number
  buyPrice: Prisma.Decimal
  MSRP: Prisma.Decimal
}

/**
 * Model temp_orderdetails
 * 
 */
export type temp_orderdetails = {
  orderLineNumber: number | null
  orderNumber: number
  priceEach: Prisma.Decimal | null
  productCode: string
  quantityOrdered: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customers.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customers.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.customers`: Exposes CRUD operations for the **customers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customers.findMany()
    * ```
    */
  get customers(): Prisma.customersDelegate<GlobalReject>;

  /**
   * `prisma.employees`: Exposes CRUD operations for the **employees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employees.findMany()
    * ```
    */
  get employees(): Prisma.employeesDelegate<GlobalReject>;

  /**
   * `prisma.offices`: Exposes CRUD operations for the **offices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offices
    * const offices = await prisma.offices.findMany()
    * ```
    */
  get offices(): Prisma.officesDelegate<GlobalReject>;

  /**
   * `prisma.orderdetails`: Exposes CRUD operations for the **orderdetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orderdetails
    * const orderdetails = await prisma.orderdetails.findMany()
    * ```
    */
  get orderdetails(): Prisma.orderdetailsDelegate<GlobalReject>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<GlobalReject>;

  /**
   * `prisma.payments`: Exposes CRUD operations for the **payments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payments.findMany()
    * ```
    */
  get payments(): Prisma.paymentsDelegate<GlobalReject>;

  /**
   * `prisma.productlines`: Exposes CRUD operations for the **productlines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productlines
    * const productlines = await prisma.productlines.findMany()
    * ```
    */
  get productlines(): Prisma.productlinesDelegate<GlobalReject>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<GlobalReject>;

  /**
   * `prisma.temp_orderdetails`: Exposes CRUD operations for the **temp_orderdetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Temp_orderdetails
    * const temp_orderdetails = await prisma.temp_orderdetails.findMany()
    * ```
    */
  get temp_orderdetails(): Prisma.temp_orderdetailsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    customers: 'customers',
    employees: 'employees',
    offices: 'offices',
    orderdetails: 'orderdetails',
    orders: 'orders',
    payments: 'payments',
    productlines: 'productlines',
    products: 'products',
    temp_orderdetails: 'temp_orderdetails'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomersCountOutputType
   */


  export type CustomersCountOutputType = {
    orders: number
    payments: number
  }

  export type CustomersCountOutputTypeSelect = {
    orders?: boolean
    payments?: boolean
  }

  export type CustomersCountOutputTypeGetPayload<S extends boolean | null | undefined | CustomersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CustomersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CustomersCountOutputTypeArgs)
    ? CustomersCountOutputType 
    : S extends { select: any } & (CustomersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CustomersCountOutputType ? CustomersCountOutputType[P] : never
  } 
      : CustomersCountOutputType




  // Custom InputTypes

  /**
   * CustomersCountOutputType without action
   */
  export type CustomersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CustomersCountOutputType
     */
    select?: CustomersCountOutputTypeSelect | null
  }



  /**
   * Count Type EmployeesCountOutputType
   */


  export type EmployeesCountOutputType = {
    customers: number
    other_employees: number
  }

  export type EmployeesCountOutputTypeSelect = {
    customers?: boolean
    other_employees?: boolean
  }

  export type EmployeesCountOutputTypeGetPayload<S extends boolean | null | undefined | EmployeesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EmployeesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EmployeesCountOutputTypeArgs)
    ? EmployeesCountOutputType 
    : S extends { select: any } & (EmployeesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EmployeesCountOutputType ? EmployeesCountOutputType[P] : never
  } 
      : EmployeesCountOutputType




  // Custom InputTypes

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EmployeesCountOutputType
     */
    select?: EmployeesCountOutputTypeSelect | null
  }



  /**
   * Count Type OfficesCountOutputType
   */


  export type OfficesCountOutputType = {
    employees: number
  }

  export type OfficesCountOutputTypeSelect = {
    employees?: boolean
  }

  export type OfficesCountOutputTypeGetPayload<S extends boolean | null | undefined | OfficesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OfficesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OfficesCountOutputTypeArgs)
    ? OfficesCountOutputType 
    : S extends { select: any } & (OfficesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OfficesCountOutputType ? OfficesCountOutputType[P] : never
  } 
      : OfficesCountOutputType




  // Custom InputTypes

  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OfficesCountOutputType
     */
    select?: OfficesCountOutputTypeSelect | null
  }



  /**
   * Count Type OrdersCountOutputType
   */


  export type OrdersCountOutputType = {
    orderdetails: number
  }

  export type OrdersCountOutputTypeSelect = {
    orderdetails?: boolean
  }

  export type OrdersCountOutputTypeGetPayload<S extends boolean | null | undefined | OrdersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrdersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrdersCountOutputTypeArgs)
    ? OrdersCountOutputType 
    : S extends { select: any } & (OrdersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrdersCountOutputType ? OrdersCountOutputType[P] : never
  } 
      : OrdersCountOutputType




  // Custom InputTypes

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductlinesCountOutputType
   */


  export type ProductlinesCountOutputType = {
    products: number
  }

  export type ProductlinesCountOutputTypeSelect = {
    products?: boolean
  }

  export type ProductlinesCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductlinesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductlinesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductlinesCountOutputTypeArgs)
    ? ProductlinesCountOutputType 
    : S extends { select: any } & (ProductlinesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductlinesCountOutputType ? ProductlinesCountOutputType[P] : never
  } 
      : ProductlinesCountOutputType




  // Custom InputTypes

  /**
   * ProductlinesCountOutputType without action
   */
  export type ProductlinesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductlinesCountOutputType
     */
    select?: ProductlinesCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductsCountOutputType
   */


  export type ProductsCountOutputType = {
    orderdetails: number
  }

  export type ProductsCountOutputTypeSelect = {
    orderdetails?: boolean
  }

  export type ProductsCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductsCountOutputTypeArgs)
    ? ProductsCountOutputType 
    : S extends { select: any } & (ProductsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductsCountOutputType ? ProductsCountOutputType[P] : never
  } 
      : ProductsCountOutputType




  // Custom InputTypes

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model customers
   */


  export type AggregateCustomers = {
    _count: CustomersCountAggregateOutputType | null
    _avg: CustomersAvgAggregateOutputType | null
    _sum: CustomersSumAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
  }

  export type CustomersAvgAggregateOutputType = {
    customerNumber: number | null
    salesRepEmployeeNumber: number | null
    creditLimit: Decimal | null
  }

  export type CustomersSumAggregateOutputType = {
    customerNumber: number | null
    salesRepEmployeeNumber: number | null
    creditLimit: Decimal | null
  }

  export type CustomersMinAggregateOutputType = {
    customerNumber: number | null
    customerName: string | null
    contactLastName: string | null
    contactFirstName: string | null
    phone: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    country: string | null
    salesRepEmployeeNumber: number | null
    creditLimit: Decimal | null
  }

  export type CustomersMaxAggregateOutputType = {
    customerNumber: number | null
    customerName: string | null
    contactLastName: string | null
    contactFirstName: string | null
    phone: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    country: string | null
    salesRepEmployeeNumber: number | null
    creditLimit: Decimal | null
  }

  export type CustomersCountAggregateOutputType = {
    customerNumber: number
    customerName: number
    contactLastName: number
    contactFirstName: number
    phone: number
    addressLine1: number
    addressLine2: number
    city: number
    state: number
    postalCode: number
    country: number
    salesRepEmployeeNumber: number
    creditLimit: number
    _all: number
  }


  export type CustomersAvgAggregateInputType = {
    customerNumber?: true
    salesRepEmployeeNumber?: true
    creditLimit?: true
  }

  export type CustomersSumAggregateInputType = {
    customerNumber?: true
    salesRepEmployeeNumber?: true
    creditLimit?: true
  }

  export type CustomersMinAggregateInputType = {
    customerNumber?: true
    customerName?: true
    contactLastName?: true
    contactFirstName?: true
    phone?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    salesRepEmployeeNumber?: true
    creditLimit?: true
  }

  export type CustomersMaxAggregateInputType = {
    customerNumber?: true
    customerName?: true
    contactLastName?: true
    contactFirstName?: true
    phone?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    salesRepEmployeeNumber?: true
    creditLimit?: true
  }

  export type CustomersCountAggregateInputType = {
    customerNumber?: true
    customerName?: true
    contactLastName?: true
    contactFirstName?: true
    phone?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    salesRepEmployeeNumber?: true
    creditLimit?: true
    _all?: true
  }

  export type CustomersAggregateArgs = {
    /**
     * Filter which customers to aggregate.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: Enumerable<customersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomersMaxAggregateInputType
  }

  export type GetCustomersAggregateType<T extends CustomersAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomers[P]>
      : GetScalarType<T[P], AggregateCustomers[P]>
  }




  export type CustomersGroupByArgs = {
    where?: customersWhereInput
    orderBy?: Enumerable<customersOrderByWithAggregationInput>
    by: CustomersScalarFieldEnum[]
    having?: customersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomersCountAggregateInputType | true
    _avg?: CustomersAvgAggregateInputType
    _sum?: CustomersSumAggregateInputType
    _min?: CustomersMinAggregateInputType
    _max?: CustomersMaxAggregateInputType
  }


  export type CustomersGroupByOutputType = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2: string | null
    city: string
    state: string | null
    postalCode: string | null
    country: string
    salesRepEmployeeNumber: number | null
    creditLimit: Decimal | null
    _count: CustomersCountAggregateOutputType | null
    _avg: CustomersAvgAggregateOutputType | null
    _sum: CustomersSumAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
  }

  type GetCustomersGroupByPayload<T extends CustomersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomersGroupByOutputType[P]>
            : GetScalarType<T[P], CustomersGroupByOutputType[P]>
        }
      >
    >


  export type customersSelect = {
    customerNumber?: boolean
    customerName?: boolean
    contactLastName?: boolean
    contactFirstName?: boolean
    phone?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    postalCode?: boolean
    country?: boolean
    salesRepEmployeeNumber?: boolean
    creditLimit?: boolean
    employees?: boolean | employeesArgs
    orders?: boolean | customers$ordersArgs
    payments?: boolean | customers$paymentsArgs
    _count?: boolean | CustomersCountOutputTypeArgs
  }


  export type customersInclude = {
    employees?: boolean | employeesArgs
    orders?: boolean | customers$ordersArgs
    payments?: boolean | customers$paymentsArgs
    _count?: boolean | CustomersCountOutputTypeArgs
  }

  export type customersGetPayload<S extends boolean | null | undefined | customersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? customers :
    S extends undefined ? never :
    S extends { include: any } & (customersArgs | customersFindManyArgs)
    ? customers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'employees' ? employeesGetPayload<S['include'][P]> | null :
        P extends 'orders' ? Array < ordersGetPayload<S['include'][P]>>  :
        P extends 'payments' ? Array < paymentsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CustomersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (customersArgs | customersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'employees' ? employeesGetPayload<S['select'][P]> | null :
        P extends 'orders' ? Array < ordersGetPayload<S['select'][P]>>  :
        P extends 'payments' ? Array < paymentsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CustomersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof customers ? customers[P] : never
  } 
      : customers


  type customersCountArgs = 
    Omit<customersFindManyArgs, 'select' | 'include'> & {
      select?: CustomersCountAggregateInputType | true
    }

  export interface customersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Customers that matches the filter.
     * @param {customersFindUniqueArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customers'> extends True ? Prisma__customersClient<customersGetPayload<T>> : Prisma__customersClient<customersGetPayload<T> | null, null>

    /**
     * Find one Customers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {customersFindUniqueOrThrowArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends customersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, customersFindUniqueOrThrowArgs>
    ): Prisma__customersClient<customersGetPayload<T>>

    /**
     * Find the first Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindFirstArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customers'> extends True ? Prisma__customersClient<customersGetPayload<T>> : Prisma__customersClient<customersGetPayload<T> | null, null>

    /**
     * Find the first Customers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindFirstOrThrowArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends customersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, customersFindFirstOrThrowArgs>
    ): Prisma__customersClient<customersGetPayload<T>>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customers.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customers.findMany({ take: 10 })
     * 
     * // Only select the `customerNumber`
     * const customersWithCustomerNumberOnly = await prisma.customers.findMany({ select: { customerNumber: true } })
     * 
    **/
    findMany<T extends customersFindManyArgs>(
      args?: SelectSubset<T, customersFindManyArgs>
    ): Prisma.PrismaPromise<Array<customersGetPayload<T>>>

    /**
     * Create a Customers.
     * @param {customersCreateArgs} args - Arguments to create a Customers.
     * @example
     * // Create one Customers
     * const Customers = await prisma.customers.create({
     *   data: {
     *     // ... data to create a Customers
     *   }
     * })
     * 
    **/
    create<T extends customersCreateArgs>(
      args: SelectSubset<T, customersCreateArgs>
    ): Prisma__customersClient<customersGetPayload<T>>

    /**
     * Create many Customers.
     *     @param {customersCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customers = await prisma.customers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customersCreateManyArgs>(
      args?: SelectSubset<T, customersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customers.
     * @param {customersDeleteArgs} args - Arguments to delete one Customers.
     * @example
     * // Delete one Customers
     * const Customers = await prisma.customers.delete({
     *   where: {
     *     // ... filter to delete one Customers
     *   }
     * })
     * 
    **/
    delete<T extends customersDeleteArgs>(
      args: SelectSubset<T, customersDeleteArgs>
    ): Prisma__customersClient<customersGetPayload<T>>

    /**
     * Update one Customers.
     * @param {customersUpdateArgs} args - Arguments to update one Customers.
     * @example
     * // Update one Customers
     * const customers = await prisma.customers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customersUpdateArgs>(
      args: SelectSubset<T, customersUpdateArgs>
    ): Prisma__customersClient<customersGetPayload<T>>

    /**
     * Delete zero or more Customers.
     * @param {customersDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customersDeleteManyArgs>(
      args?: SelectSubset<T, customersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customers = await prisma.customers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customersUpdateManyArgs>(
      args: SelectSubset<T, customersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customers.
     * @param {customersUpsertArgs} args - Arguments to update or create a Customers.
     * @example
     * // Update or create a Customers
     * const customers = await prisma.customers.upsert({
     *   create: {
     *     // ... data to create a Customers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customers we want to update
     *   }
     * })
    **/
    upsert<T extends customersUpsertArgs>(
      args: SelectSubset<T, customersUpsertArgs>
    ): Prisma__customersClient<customersGetPayload<T>>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customers.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customersCountArgs>(
      args?: Subset<T, customersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomersAggregateArgs>(args: Subset<T, CustomersAggregateArgs>): Prisma.PrismaPromise<GetCustomersAggregateType<T>>

    /**
     * Group by Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomersGroupByArgs['orderBy'] }
        : { orderBy?: CustomersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for customers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    employees<T extends employeesArgs= {}>(args?: Subset<T, employeesArgs>): Prisma__employeesClient<employeesGetPayload<T> | Null>;

    orders<T extends customers$ordersArgs= {}>(args?: Subset<T, customers$ordersArgs>): Prisma.PrismaPromise<Array<ordersGetPayload<T>>| Null>;

    payments<T extends customers$paymentsArgs= {}>(args?: Subset<T, customers$paymentsArgs>): Prisma.PrismaPromise<Array<paymentsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * customers base type for findUnique actions
   */
  export type customersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * Filter, which customers to fetch.
     */
    where: customersWhereUniqueInput
  }

  /**
   * customers findUnique
   */
  export interface customersFindUniqueArgs extends customersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customers findUniqueOrThrow
   */
  export type customersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * Filter, which customers to fetch.
     */
    where: customersWhereUniqueInput
  }


  /**
   * customers base type for findFirst actions
   */
  export type customersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: Enumerable<customersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: Enumerable<CustomersScalarFieldEnum>
  }

  /**
   * customers findFirst
   */
  export interface customersFindFirstArgs extends customersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customers findFirstOrThrow
   */
  export type customersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: Enumerable<customersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: Enumerable<CustomersScalarFieldEnum>
  }


  /**
   * customers findMany
   */
  export type customersFindManyArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: Enumerable<customersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    distinct?: Enumerable<CustomersScalarFieldEnum>
  }


  /**
   * customers create
   */
  export type customersCreateArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * The data needed to create a customers.
     */
    data: XOR<customersCreateInput, customersUncheckedCreateInput>
  }


  /**
   * customers createMany
   */
  export type customersCreateManyArgs = {
    /**
     * The data used to create many customers.
     */
    data: Enumerable<customersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customers update
   */
  export type customersUpdateArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * The data needed to update a customers.
     */
    data: XOR<customersUpdateInput, customersUncheckedUpdateInput>
    /**
     * Choose, which customers to update.
     */
    where: customersWhereUniqueInput
  }


  /**
   * customers updateMany
   */
  export type customersUpdateManyArgs = {
    /**
     * The data used to update customers.
     */
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     */
    where?: customersWhereInput
  }


  /**
   * customers upsert
   */
  export type customersUpsertArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * The filter to search for the customers to update in case it exists.
     */
    where: customersWhereUniqueInput
    /**
     * In case the customers found by the `where` argument doesn't exist, create a new customers with this data.
     */
    create: XOR<customersCreateInput, customersUncheckedCreateInput>
    /**
     * In case the customers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customersUpdateInput, customersUncheckedUpdateInput>
  }


  /**
   * customers delete
   */
  export type customersDeleteArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    /**
     * Filter which customers to delete.
     */
    where: customersWhereUniqueInput
  }


  /**
   * customers deleteMany
   */
  export type customersDeleteManyArgs = {
    /**
     * Filter which customers to delete
     */
    where?: customersWhereInput
  }


  /**
   * customers.orders
   */
  export type customers$ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * customers.payments
   */
  export type customers$paymentsArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    where?: paymentsWhereInput
    orderBy?: Enumerable<paymentsOrderByWithRelationInput>
    cursor?: paymentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PaymentsScalarFieldEnum>
  }


  /**
   * customers without action
   */
  export type customersArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
  }



  /**
   * Model employees
   */


  export type AggregateEmployees = {
    _count: EmployeesCountAggregateOutputType | null
    _avg: EmployeesAvgAggregateOutputType | null
    _sum: EmployeesSumAggregateOutputType | null
    _min: EmployeesMinAggregateOutputType | null
    _max: EmployeesMaxAggregateOutputType | null
  }

  export type EmployeesAvgAggregateOutputType = {
    employeeNumber: number | null
    reportsTo: number | null
  }

  export type EmployeesSumAggregateOutputType = {
    employeeNumber: number | null
    reportsTo: number | null
  }

  export type EmployeesMinAggregateOutputType = {
    employeeNumber: number | null
    lastName: string | null
    firstName: string | null
    extension: string | null
    email: string | null
    officeCode: string | null
    reportsTo: number | null
    jobTitle: string | null
  }

  export type EmployeesMaxAggregateOutputType = {
    employeeNumber: number | null
    lastName: string | null
    firstName: string | null
    extension: string | null
    email: string | null
    officeCode: string | null
    reportsTo: number | null
    jobTitle: string | null
  }

  export type EmployeesCountAggregateOutputType = {
    employeeNumber: number
    lastName: number
    firstName: number
    extension: number
    email: number
    officeCode: number
    reportsTo: number
    jobTitle: number
    _all: number
  }


  export type EmployeesAvgAggregateInputType = {
    employeeNumber?: true
    reportsTo?: true
  }

  export type EmployeesSumAggregateInputType = {
    employeeNumber?: true
    reportsTo?: true
  }

  export type EmployeesMinAggregateInputType = {
    employeeNumber?: true
    lastName?: true
    firstName?: true
    extension?: true
    email?: true
    officeCode?: true
    reportsTo?: true
    jobTitle?: true
  }

  export type EmployeesMaxAggregateInputType = {
    employeeNumber?: true
    lastName?: true
    firstName?: true
    extension?: true
    email?: true
    officeCode?: true
    reportsTo?: true
    jobTitle?: true
  }

  export type EmployeesCountAggregateInputType = {
    employeeNumber?: true
    lastName?: true
    firstName?: true
    extension?: true
    email?: true
    officeCode?: true
    reportsTo?: true
    jobTitle?: true
    _all?: true
  }

  export type EmployeesAggregateArgs = {
    /**
     * Filter which employees to aggregate.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: Enumerable<employeesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned employees
    **/
    _count?: true | EmployeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeesMaxAggregateInputType
  }

  export type GetEmployeesAggregateType<T extends EmployeesAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployees[P]>
      : GetScalarType<T[P], AggregateEmployees[P]>
  }




  export type EmployeesGroupByArgs = {
    where?: employeesWhereInput
    orderBy?: Enumerable<employeesOrderByWithAggregationInput>
    by: EmployeesScalarFieldEnum[]
    having?: employeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeesCountAggregateInputType | true
    _avg?: EmployeesAvgAggregateInputType
    _sum?: EmployeesSumAggregateInputType
    _min?: EmployeesMinAggregateInputType
    _max?: EmployeesMaxAggregateInputType
  }


  export type EmployeesGroupByOutputType = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    officeCode: string
    reportsTo: number | null
    jobTitle: string
    _count: EmployeesCountAggregateOutputType | null
    _avg: EmployeesAvgAggregateOutputType | null
    _sum: EmployeesSumAggregateOutputType | null
    _min: EmployeesMinAggregateOutputType | null
    _max: EmployeesMaxAggregateOutputType | null
  }

  type GetEmployeesGroupByPayload<T extends EmployeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EmployeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeesGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeesGroupByOutputType[P]>
        }
      >
    >


  export type employeesSelect = {
    employeeNumber?: boolean
    lastName?: boolean
    firstName?: boolean
    extension?: boolean
    email?: boolean
    officeCode?: boolean
    reportsTo?: boolean
    jobTitle?: boolean
    customers?: boolean | employees$customersArgs
    employees?: boolean | employeesArgs
    other_employees?: boolean | employees$other_employeesArgs
    offices?: boolean | officesArgs
    _count?: boolean | EmployeesCountOutputTypeArgs
  }


  export type employeesInclude = {
    customers?: boolean | employees$customersArgs
    employees?: boolean | employeesArgs
    other_employees?: boolean | employees$other_employeesArgs
    offices?: boolean | officesArgs
    _count?: boolean | EmployeesCountOutputTypeArgs
  }

  export type employeesGetPayload<S extends boolean | null | undefined | employeesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? employees :
    S extends undefined ? never :
    S extends { include: any } & (employeesArgs | employeesFindManyArgs)
    ? employees  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'customers' ? Array < customersGetPayload<S['include'][P]>>  :
        P extends 'employees' ? employeesGetPayload<S['include'][P]> | null :
        P extends 'other_employees' ? Array < employeesGetPayload<S['include'][P]>>  :
        P extends 'offices' ? officesGetPayload<S['include'][P]> :
        P extends '_count' ? EmployeesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (employeesArgs | employeesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'customers' ? Array < customersGetPayload<S['select'][P]>>  :
        P extends 'employees' ? employeesGetPayload<S['select'][P]> | null :
        P extends 'other_employees' ? Array < employeesGetPayload<S['select'][P]>>  :
        P extends 'offices' ? officesGetPayload<S['select'][P]> :
        P extends '_count' ? EmployeesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof employees ? employees[P] : never
  } 
      : employees


  type employeesCountArgs = 
    Omit<employeesFindManyArgs, 'select' | 'include'> & {
      select?: EmployeesCountAggregateInputType | true
    }

  export interface employeesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Employees that matches the filter.
     * @param {employeesFindUniqueArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends employeesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, employeesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'employees'> extends True ? Prisma__employeesClient<employeesGetPayload<T>> : Prisma__employeesClient<employeesGetPayload<T> | null, null>

    /**
     * Find one Employees that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {employeesFindUniqueOrThrowArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends employeesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, employeesFindUniqueOrThrowArgs>
    ): Prisma__employeesClient<employeesGetPayload<T>>

    /**
     * Find the first Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesFindFirstArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends employeesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, employeesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'employees'> extends True ? Prisma__employeesClient<employeesGetPayload<T>> : Prisma__employeesClient<employeesGetPayload<T> | null, null>

    /**
     * Find the first Employees that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesFindFirstOrThrowArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends employeesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, employeesFindFirstOrThrowArgs>
    ): Prisma__employeesClient<employeesGetPayload<T>>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employees.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employees.findMany({ take: 10 })
     * 
     * // Only select the `employeeNumber`
     * const employeesWithEmployeeNumberOnly = await prisma.employees.findMany({ select: { employeeNumber: true } })
     * 
    **/
    findMany<T extends employeesFindManyArgs>(
      args?: SelectSubset<T, employeesFindManyArgs>
    ): Prisma.PrismaPromise<Array<employeesGetPayload<T>>>

    /**
     * Create a Employees.
     * @param {employeesCreateArgs} args - Arguments to create a Employees.
     * @example
     * // Create one Employees
     * const Employees = await prisma.employees.create({
     *   data: {
     *     // ... data to create a Employees
     *   }
     * })
     * 
    **/
    create<T extends employeesCreateArgs>(
      args: SelectSubset<T, employeesCreateArgs>
    ): Prisma__employeesClient<employeesGetPayload<T>>

    /**
     * Create many Employees.
     *     @param {employeesCreateManyArgs} args - Arguments to create many Employees.
     *     @example
     *     // Create many Employees
     *     const employees = await prisma.employees.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends employeesCreateManyArgs>(
      args?: SelectSubset<T, employeesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employees.
     * @param {employeesDeleteArgs} args - Arguments to delete one Employees.
     * @example
     * // Delete one Employees
     * const Employees = await prisma.employees.delete({
     *   where: {
     *     // ... filter to delete one Employees
     *   }
     * })
     * 
    **/
    delete<T extends employeesDeleteArgs>(
      args: SelectSubset<T, employeesDeleteArgs>
    ): Prisma__employeesClient<employeesGetPayload<T>>

    /**
     * Update one Employees.
     * @param {employeesUpdateArgs} args - Arguments to update one Employees.
     * @example
     * // Update one Employees
     * const employees = await prisma.employees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends employeesUpdateArgs>(
      args: SelectSubset<T, employeesUpdateArgs>
    ): Prisma__employeesClient<employeesGetPayload<T>>

    /**
     * Delete zero or more Employees.
     * @param {employeesDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends employeesDeleteManyArgs>(
      args?: SelectSubset<T, employeesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employees = await prisma.employees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends employeesUpdateManyArgs>(
      args: SelectSubset<T, employeesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employees.
     * @param {employeesUpsertArgs} args - Arguments to update or create a Employees.
     * @example
     * // Update or create a Employees
     * const employees = await prisma.employees.upsert({
     *   create: {
     *     // ... data to create a Employees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employees we want to update
     *   }
     * })
    **/
    upsert<T extends employeesUpsertArgs>(
      args: SelectSubset<T, employeesUpsertArgs>
    ): Prisma__employeesClient<employeesGetPayload<T>>

    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employees.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends employeesCountArgs>(
      args?: Subset<T, employeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeesAggregateArgs>(args: Subset<T, EmployeesAggregateArgs>): Prisma.PrismaPromise<GetEmployeesAggregateType<T>>

    /**
     * Group by Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeesGroupByArgs['orderBy'] }
        : { orderBy?: EmployeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for employees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__employeesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    customers<T extends employees$customersArgs= {}>(args?: Subset<T, employees$customersArgs>): Prisma.PrismaPromise<Array<customersGetPayload<T>>| Null>;

    employees<T extends employeesArgs= {}>(args?: Subset<T, employeesArgs>): Prisma__employeesClient<employeesGetPayload<T> | Null>;

    other_employees<T extends employees$other_employeesArgs= {}>(args?: Subset<T, employees$other_employeesArgs>): Prisma.PrismaPromise<Array<employeesGetPayload<T>>| Null>;

    offices<T extends officesArgs= {}>(args?: Subset<T, officesArgs>): Prisma__officesClient<officesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * employees base type for findUnique actions
   */
  export type employeesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * Filter, which employees to fetch.
     */
    where: employeesWhereUniqueInput
  }

  /**
   * employees findUnique
   */
  export interface employeesFindUniqueArgs extends employeesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * employees findUniqueOrThrow
   */
  export type employeesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * Filter, which employees to fetch.
     */
    where: employeesWhereUniqueInput
  }


  /**
   * employees base type for findFirst actions
   */
  export type employeesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * Filter, which employees to fetch.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: Enumerable<employeesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employees.
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employees.
     */
    distinct?: Enumerable<EmployeesScalarFieldEnum>
  }

  /**
   * employees findFirst
   */
  export interface employeesFindFirstArgs extends employeesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * employees findFirstOrThrow
   */
  export type employeesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * Filter, which employees to fetch.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: Enumerable<employeesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employees.
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employees.
     */
    distinct?: Enumerable<EmployeesScalarFieldEnum>
  }


  /**
   * employees findMany
   */
  export type employeesFindManyArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * Filter, which employees to fetch.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: Enumerable<employeesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing employees.
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    distinct?: Enumerable<EmployeesScalarFieldEnum>
  }


  /**
   * employees create
   */
  export type employeesCreateArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * The data needed to create a employees.
     */
    data: XOR<employeesCreateInput, employeesUncheckedCreateInput>
  }


  /**
   * employees createMany
   */
  export type employeesCreateManyArgs = {
    /**
     * The data used to create many employees.
     */
    data: Enumerable<employeesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * employees update
   */
  export type employeesUpdateArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * The data needed to update a employees.
     */
    data: XOR<employeesUpdateInput, employeesUncheckedUpdateInput>
    /**
     * Choose, which employees to update.
     */
    where: employeesWhereUniqueInput
  }


  /**
   * employees updateMany
   */
  export type employeesUpdateManyArgs = {
    /**
     * The data used to update employees.
     */
    data: XOR<employeesUpdateManyMutationInput, employeesUncheckedUpdateManyInput>
    /**
     * Filter which employees to update
     */
    where?: employeesWhereInput
  }


  /**
   * employees upsert
   */
  export type employeesUpsertArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * The filter to search for the employees to update in case it exists.
     */
    where: employeesWhereUniqueInput
    /**
     * In case the employees found by the `where` argument doesn't exist, create a new employees with this data.
     */
    create: XOR<employeesCreateInput, employeesUncheckedCreateInput>
    /**
     * In case the employees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<employeesUpdateInput, employeesUncheckedUpdateInput>
  }


  /**
   * employees delete
   */
  export type employeesDeleteArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    /**
     * Filter which employees to delete.
     */
    where: employeesWhereUniqueInput
  }


  /**
   * employees deleteMany
   */
  export type employeesDeleteManyArgs = {
    /**
     * Filter which employees to delete
     */
    where?: employeesWhereInput
  }


  /**
   * employees.customers
   */
  export type employees$customersArgs = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customersInclude | null
    where?: customersWhereInput
    orderBy?: Enumerable<customersOrderByWithRelationInput>
    cursor?: customersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CustomersScalarFieldEnum>
  }


  /**
   * employees.other_employees
   */
  export type employees$other_employeesArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    where?: employeesWhereInput
    orderBy?: Enumerable<employeesOrderByWithRelationInput>
    cursor?: employeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EmployeesScalarFieldEnum>
  }


  /**
   * employees without action
   */
  export type employeesArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
  }



  /**
   * Model offices
   */


  export type AggregateOffices = {
    _count: OfficesCountAggregateOutputType | null
    _min: OfficesMinAggregateOutputType | null
    _max: OfficesMaxAggregateOutputType | null
  }

  export type OfficesMinAggregateOutputType = {
    officeCode: string | null
    city: string | null
    phone: string | null
    addressLine1: string | null
    addressLine2: string | null
    state: string | null
    country: string | null
    postalCode: string | null
    territory: string | null
  }

  export type OfficesMaxAggregateOutputType = {
    officeCode: string | null
    city: string | null
    phone: string | null
    addressLine1: string | null
    addressLine2: string | null
    state: string | null
    country: string | null
    postalCode: string | null
    territory: string | null
  }

  export type OfficesCountAggregateOutputType = {
    officeCode: number
    city: number
    phone: number
    addressLine1: number
    addressLine2: number
    state: number
    country: number
    postalCode: number
    territory: number
    _all: number
  }


  export type OfficesMinAggregateInputType = {
    officeCode?: true
    city?: true
    phone?: true
    addressLine1?: true
    addressLine2?: true
    state?: true
    country?: true
    postalCode?: true
    territory?: true
  }

  export type OfficesMaxAggregateInputType = {
    officeCode?: true
    city?: true
    phone?: true
    addressLine1?: true
    addressLine2?: true
    state?: true
    country?: true
    postalCode?: true
    territory?: true
  }

  export type OfficesCountAggregateInputType = {
    officeCode?: true
    city?: true
    phone?: true
    addressLine1?: true
    addressLine2?: true
    state?: true
    country?: true
    postalCode?: true
    territory?: true
    _all?: true
  }

  export type OfficesAggregateArgs = {
    /**
     * Filter which offices to aggregate.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: Enumerable<officesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned offices
    **/
    _count?: true | OfficesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfficesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfficesMaxAggregateInputType
  }

  export type GetOfficesAggregateType<T extends OfficesAggregateArgs> = {
        [P in keyof T & keyof AggregateOffices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffices[P]>
      : GetScalarType<T[P], AggregateOffices[P]>
  }




  export type OfficesGroupByArgs = {
    where?: officesWhereInput
    orderBy?: Enumerable<officesOrderByWithAggregationInput>
    by: OfficesScalarFieldEnum[]
    having?: officesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfficesCountAggregateInputType | true
    _min?: OfficesMinAggregateInputType
    _max?: OfficesMaxAggregateInputType
  }


  export type OfficesGroupByOutputType = {
    officeCode: string
    city: string
    phone: string
    addressLine1: string
    addressLine2: string | null
    state: string | null
    country: string
    postalCode: string
    territory: string
    _count: OfficesCountAggregateOutputType | null
    _min: OfficesMinAggregateOutputType | null
    _max: OfficesMaxAggregateOutputType | null
  }

  type GetOfficesGroupByPayload<T extends OfficesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OfficesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfficesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfficesGroupByOutputType[P]>
            : GetScalarType<T[P], OfficesGroupByOutputType[P]>
        }
      >
    >


  export type officesSelect = {
    officeCode?: boolean
    city?: boolean
    phone?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    state?: boolean
    country?: boolean
    postalCode?: boolean
    territory?: boolean
    employees?: boolean | offices$employeesArgs
    _count?: boolean | OfficesCountOutputTypeArgs
  }


  export type officesInclude = {
    employees?: boolean | offices$employeesArgs
    _count?: boolean | OfficesCountOutputTypeArgs
  }

  export type officesGetPayload<S extends boolean | null | undefined | officesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? offices :
    S extends undefined ? never :
    S extends { include: any } & (officesArgs | officesFindManyArgs)
    ? offices  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'employees' ? Array < employeesGetPayload<S['include'][P]>>  :
        P extends '_count' ? OfficesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (officesArgs | officesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'employees' ? Array < employeesGetPayload<S['select'][P]>>  :
        P extends '_count' ? OfficesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof offices ? offices[P] : never
  } 
      : offices


  type officesCountArgs = 
    Omit<officesFindManyArgs, 'select' | 'include'> & {
      select?: OfficesCountAggregateInputType | true
    }

  export interface officesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Offices that matches the filter.
     * @param {officesFindUniqueArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends officesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, officesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'offices'> extends True ? Prisma__officesClient<officesGetPayload<T>> : Prisma__officesClient<officesGetPayload<T> | null, null>

    /**
     * Find one Offices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {officesFindUniqueOrThrowArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends officesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, officesFindUniqueOrThrowArgs>
    ): Prisma__officesClient<officesGetPayload<T>>

    /**
     * Find the first Offices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesFindFirstArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends officesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, officesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'offices'> extends True ? Prisma__officesClient<officesGetPayload<T>> : Prisma__officesClient<officesGetPayload<T> | null, null>

    /**
     * Find the first Offices that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesFindFirstOrThrowArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends officesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, officesFindFirstOrThrowArgs>
    ): Prisma__officesClient<officesGetPayload<T>>

    /**
     * Find zero or more Offices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offices
     * const offices = await prisma.offices.findMany()
     * 
     * // Get first 10 Offices
     * const offices = await prisma.offices.findMany({ take: 10 })
     * 
     * // Only select the `officeCode`
     * const officesWithOfficeCodeOnly = await prisma.offices.findMany({ select: { officeCode: true } })
     * 
    **/
    findMany<T extends officesFindManyArgs>(
      args?: SelectSubset<T, officesFindManyArgs>
    ): Prisma.PrismaPromise<Array<officesGetPayload<T>>>

    /**
     * Create a Offices.
     * @param {officesCreateArgs} args - Arguments to create a Offices.
     * @example
     * // Create one Offices
     * const Offices = await prisma.offices.create({
     *   data: {
     *     // ... data to create a Offices
     *   }
     * })
     * 
    **/
    create<T extends officesCreateArgs>(
      args: SelectSubset<T, officesCreateArgs>
    ): Prisma__officesClient<officesGetPayload<T>>

    /**
     * Create many Offices.
     *     @param {officesCreateManyArgs} args - Arguments to create many Offices.
     *     @example
     *     // Create many Offices
     *     const offices = await prisma.offices.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends officesCreateManyArgs>(
      args?: SelectSubset<T, officesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Offices.
     * @param {officesDeleteArgs} args - Arguments to delete one Offices.
     * @example
     * // Delete one Offices
     * const Offices = await prisma.offices.delete({
     *   where: {
     *     // ... filter to delete one Offices
     *   }
     * })
     * 
    **/
    delete<T extends officesDeleteArgs>(
      args: SelectSubset<T, officesDeleteArgs>
    ): Prisma__officesClient<officesGetPayload<T>>

    /**
     * Update one Offices.
     * @param {officesUpdateArgs} args - Arguments to update one Offices.
     * @example
     * // Update one Offices
     * const offices = await prisma.offices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends officesUpdateArgs>(
      args: SelectSubset<T, officesUpdateArgs>
    ): Prisma__officesClient<officesGetPayload<T>>

    /**
     * Delete zero or more Offices.
     * @param {officesDeleteManyArgs} args - Arguments to filter Offices to delete.
     * @example
     * // Delete a few Offices
     * const { count } = await prisma.offices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends officesDeleteManyArgs>(
      args?: SelectSubset<T, officesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offices
     * const offices = await prisma.offices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends officesUpdateManyArgs>(
      args: SelectSubset<T, officesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Offices.
     * @param {officesUpsertArgs} args - Arguments to update or create a Offices.
     * @example
     * // Update or create a Offices
     * const offices = await prisma.offices.upsert({
     *   create: {
     *     // ... data to create a Offices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offices we want to update
     *   }
     * })
    **/
    upsert<T extends officesUpsertArgs>(
      args: SelectSubset<T, officesUpsertArgs>
    ): Prisma__officesClient<officesGetPayload<T>>

    /**
     * Count the number of Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesCountArgs} args - Arguments to filter Offices to count.
     * @example
     * // Count the number of Offices
     * const count = await prisma.offices.count({
     *   where: {
     *     // ... the filter for the Offices we want to count
     *   }
     * })
    **/
    count<T extends officesCountArgs>(
      args?: Subset<T, officesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfficesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfficesAggregateArgs>(args: Subset<T, OfficesAggregateArgs>): Prisma.PrismaPromise<GetOfficesAggregateType<T>>

    /**
     * Group by Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfficesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfficesGroupByArgs['orderBy'] }
        : { orderBy?: OfficesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfficesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfficesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for offices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__officesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    employees<T extends offices$employeesArgs= {}>(args?: Subset<T, offices$employeesArgs>): Prisma.PrismaPromise<Array<employeesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * offices base type for findUnique actions
   */
  export type officesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * Filter, which offices to fetch.
     */
    where: officesWhereUniqueInput
  }

  /**
   * offices findUnique
   */
  export interface officesFindUniqueArgs extends officesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * offices findUniqueOrThrow
   */
  export type officesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * Filter, which offices to fetch.
     */
    where: officesWhereUniqueInput
  }


  /**
   * offices base type for findFirst actions
   */
  export type officesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * Filter, which offices to fetch.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: Enumerable<officesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offices.
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offices.
     */
    distinct?: Enumerable<OfficesScalarFieldEnum>
  }

  /**
   * offices findFirst
   */
  export interface officesFindFirstArgs extends officesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * offices findFirstOrThrow
   */
  export type officesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * Filter, which offices to fetch.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: Enumerable<officesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offices.
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offices.
     */
    distinct?: Enumerable<OfficesScalarFieldEnum>
  }


  /**
   * offices findMany
   */
  export type officesFindManyArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * Filter, which offices to fetch.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: Enumerable<officesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing offices.
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    distinct?: Enumerable<OfficesScalarFieldEnum>
  }


  /**
   * offices create
   */
  export type officesCreateArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * The data needed to create a offices.
     */
    data: XOR<officesCreateInput, officesUncheckedCreateInput>
  }


  /**
   * offices createMany
   */
  export type officesCreateManyArgs = {
    /**
     * The data used to create many offices.
     */
    data: Enumerable<officesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * offices update
   */
  export type officesUpdateArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * The data needed to update a offices.
     */
    data: XOR<officesUpdateInput, officesUncheckedUpdateInput>
    /**
     * Choose, which offices to update.
     */
    where: officesWhereUniqueInput
  }


  /**
   * offices updateMany
   */
  export type officesUpdateManyArgs = {
    /**
     * The data used to update offices.
     */
    data: XOR<officesUpdateManyMutationInput, officesUncheckedUpdateManyInput>
    /**
     * Filter which offices to update
     */
    where?: officesWhereInput
  }


  /**
   * offices upsert
   */
  export type officesUpsertArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * The filter to search for the offices to update in case it exists.
     */
    where: officesWhereUniqueInput
    /**
     * In case the offices found by the `where` argument doesn't exist, create a new offices with this data.
     */
    create: XOR<officesCreateInput, officesUncheckedCreateInput>
    /**
     * In case the offices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<officesUpdateInput, officesUncheckedUpdateInput>
  }


  /**
   * offices delete
   */
  export type officesDeleteArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
    /**
     * Filter which offices to delete.
     */
    where: officesWhereUniqueInput
  }


  /**
   * offices deleteMany
   */
  export type officesDeleteManyArgs = {
    /**
     * Filter which offices to delete
     */
    where?: officesWhereInput
  }


  /**
   * offices.employees
   */
  export type offices$employeesArgs = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeesInclude | null
    where?: employeesWhereInput
    orderBy?: Enumerable<employeesOrderByWithRelationInput>
    cursor?: employeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EmployeesScalarFieldEnum>
  }


  /**
   * offices without action
   */
  export type officesArgs = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude | null
  }



  /**
   * Model orderdetails
   */


  export type AggregateOrderdetails = {
    _count: OrderdetailsCountAggregateOutputType | null
    _avg: OrderdetailsAvgAggregateOutputType | null
    _sum: OrderdetailsSumAggregateOutputType | null
    _min: OrderdetailsMinAggregateOutputType | null
    _max: OrderdetailsMaxAggregateOutputType | null
  }

  export type OrderdetailsAvgAggregateOutputType = {
    orderNumber: number | null
    quantityOrdered: number | null
    priceEach: Decimal | null
    orderLineNumber: number | null
  }

  export type OrderdetailsSumAggregateOutputType = {
    orderNumber: number | null
    quantityOrdered: number | null
    priceEach: Decimal | null
    orderLineNumber: number | null
  }

  export type OrderdetailsMinAggregateOutputType = {
    orderNumber: number | null
    productCode: string | null
    quantityOrdered: number | null
    priceEach: Decimal | null
    orderLineNumber: number | null
  }

  export type OrderdetailsMaxAggregateOutputType = {
    orderNumber: number | null
    productCode: string | null
    quantityOrdered: number | null
    priceEach: Decimal | null
    orderLineNumber: number | null
  }

  export type OrderdetailsCountAggregateOutputType = {
    orderNumber: number
    productCode: number
    quantityOrdered: number
    priceEach: number
    orderLineNumber: number
    _all: number
  }


  export type OrderdetailsAvgAggregateInputType = {
    orderNumber?: true
    quantityOrdered?: true
    priceEach?: true
    orderLineNumber?: true
  }

  export type OrderdetailsSumAggregateInputType = {
    orderNumber?: true
    quantityOrdered?: true
    priceEach?: true
    orderLineNumber?: true
  }

  export type OrderdetailsMinAggregateInputType = {
    orderNumber?: true
    productCode?: true
    quantityOrdered?: true
    priceEach?: true
    orderLineNumber?: true
  }

  export type OrderdetailsMaxAggregateInputType = {
    orderNumber?: true
    productCode?: true
    quantityOrdered?: true
    priceEach?: true
    orderLineNumber?: true
  }

  export type OrderdetailsCountAggregateInputType = {
    orderNumber?: true
    productCode?: true
    quantityOrdered?: true
    priceEach?: true
    orderLineNumber?: true
    _all?: true
  }

  export type OrderdetailsAggregateArgs = {
    /**
     * Filter which orderdetails to aggregate.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderdetails
    **/
    _count?: true | OrderdetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderdetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderdetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderdetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderdetailsMaxAggregateInputType
  }

  export type GetOrderdetailsAggregateType<T extends OrderdetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderdetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderdetails[P]>
      : GetScalarType<T[P], AggregateOrderdetails[P]>
  }




  export type OrderdetailsGroupByArgs = {
    where?: orderdetailsWhereInput
    orderBy?: Enumerable<orderdetailsOrderByWithAggregationInput>
    by: OrderdetailsScalarFieldEnum[]
    having?: orderdetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderdetailsCountAggregateInputType | true
    _avg?: OrderdetailsAvgAggregateInputType
    _sum?: OrderdetailsSumAggregateInputType
    _min?: OrderdetailsMinAggregateInputType
    _max?: OrderdetailsMaxAggregateInputType
  }


  export type OrderdetailsGroupByOutputType = {
    orderNumber: number
    productCode: string
    quantityOrdered: number
    priceEach: Decimal
    orderLineNumber: number
    _count: OrderdetailsCountAggregateOutputType | null
    _avg: OrderdetailsAvgAggregateOutputType | null
    _sum: OrderdetailsSumAggregateOutputType | null
    _min: OrderdetailsMinAggregateOutputType | null
    _max: OrderdetailsMaxAggregateOutputType | null
  }

  type GetOrderdetailsGroupByPayload<T extends OrderdetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrderdetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderdetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderdetailsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderdetailsGroupByOutputType[P]>
        }
      >
    >


  export type orderdetailsSelect = {
    orderNumber?: boolean
    productCode?: boolean
    quantityOrdered?: boolean
    priceEach?: boolean
    orderLineNumber?: boolean
    orders?: boolean | ordersArgs
    products?: boolean | productsArgs
  }


  export type orderdetailsInclude = {
    orders?: boolean | ordersArgs
    products?: boolean | productsArgs
  }

  export type orderdetailsGetPayload<S extends boolean | null | undefined | orderdetailsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? orderdetails :
    S extends undefined ? never :
    S extends { include: any } & (orderdetailsArgs | orderdetailsFindManyArgs)
    ? orderdetails  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orders' ? ordersGetPayload<S['include'][P]> :
        P extends 'products' ? productsGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (orderdetailsArgs | orderdetailsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orders' ? ordersGetPayload<S['select'][P]> :
        P extends 'products' ? productsGetPayload<S['select'][P]> :  P extends keyof orderdetails ? orderdetails[P] : never
  } 
      : orderdetails


  type orderdetailsCountArgs = 
    Omit<orderdetailsFindManyArgs, 'select' | 'include'> & {
      select?: OrderdetailsCountAggregateInputType | true
    }

  export interface orderdetailsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Orderdetails that matches the filter.
     * @param {orderdetailsFindUniqueArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends orderdetailsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, orderdetailsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orderdetails'> extends True ? Prisma__orderdetailsClient<orderdetailsGetPayload<T>> : Prisma__orderdetailsClient<orderdetailsGetPayload<T> | null, null>

    /**
     * Find one Orderdetails that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {orderdetailsFindUniqueOrThrowArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends orderdetailsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, orderdetailsFindUniqueOrThrowArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Find the first Orderdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsFindFirstArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends orderdetailsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, orderdetailsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orderdetails'> extends True ? Prisma__orderdetailsClient<orderdetailsGetPayload<T>> : Prisma__orderdetailsClient<orderdetailsGetPayload<T> | null, null>

    /**
     * Find the first Orderdetails that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsFindFirstOrThrowArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends orderdetailsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, orderdetailsFindFirstOrThrowArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Find zero or more Orderdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orderdetails
     * const orderdetails = await prisma.orderdetails.findMany()
     * 
     * // Get first 10 Orderdetails
     * const orderdetails = await prisma.orderdetails.findMany({ take: 10 })
     * 
     * // Only select the `orderNumber`
     * const orderdetailsWithOrderNumberOnly = await prisma.orderdetails.findMany({ select: { orderNumber: true } })
     * 
    **/
    findMany<T extends orderdetailsFindManyArgs>(
      args?: SelectSubset<T, orderdetailsFindManyArgs>
    ): Prisma.PrismaPromise<Array<orderdetailsGetPayload<T>>>

    /**
     * Create a Orderdetails.
     * @param {orderdetailsCreateArgs} args - Arguments to create a Orderdetails.
     * @example
     * // Create one Orderdetails
     * const Orderdetails = await prisma.orderdetails.create({
     *   data: {
     *     // ... data to create a Orderdetails
     *   }
     * })
     * 
    **/
    create<T extends orderdetailsCreateArgs>(
      args: SelectSubset<T, orderdetailsCreateArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Create many Orderdetails.
     *     @param {orderdetailsCreateManyArgs} args - Arguments to create many Orderdetails.
     *     @example
     *     // Create many Orderdetails
     *     const orderdetails = await prisma.orderdetails.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends orderdetailsCreateManyArgs>(
      args?: SelectSubset<T, orderdetailsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orderdetails.
     * @param {orderdetailsDeleteArgs} args - Arguments to delete one Orderdetails.
     * @example
     * // Delete one Orderdetails
     * const Orderdetails = await prisma.orderdetails.delete({
     *   where: {
     *     // ... filter to delete one Orderdetails
     *   }
     * })
     * 
    **/
    delete<T extends orderdetailsDeleteArgs>(
      args: SelectSubset<T, orderdetailsDeleteArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Update one Orderdetails.
     * @param {orderdetailsUpdateArgs} args - Arguments to update one Orderdetails.
     * @example
     * // Update one Orderdetails
     * const orderdetails = await prisma.orderdetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends orderdetailsUpdateArgs>(
      args: SelectSubset<T, orderdetailsUpdateArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Delete zero or more Orderdetails.
     * @param {orderdetailsDeleteManyArgs} args - Arguments to filter Orderdetails to delete.
     * @example
     * // Delete a few Orderdetails
     * const { count } = await prisma.orderdetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends orderdetailsDeleteManyArgs>(
      args?: SelectSubset<T, orderdetailsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orderdetails
     * const orderdetails = await prisma.orderdetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends orderdetailsUpdateManyArgs>(
      args: SelectSubset<T, orderdetailsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orderdetails.
     * @param {orderdetailsUpsertArgs} args - Arguments to update or create a Orderdetails.
     * @example
     * // Update or create a Orderdetails
     * const orderdetails = await prisma.orderdetails.upsert({
     *   create: {
     *     // ... data to create a Orderdetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orderdetails we want to update
     *   }
     * })
    **/
    upsert<T extends orderdetailsUpsertArgs>(
      args: SelectSubset<T, orderdetailsUpsertArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Count the number of Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsCountArgs} args - Arguments to filter Orderdetails to count.
     * @example
     * // Count the number of Orderdetails
     * const count = await prisma.orderdetails.count({
     *   where: {
     *     // ... the filter for the Orderdetails we want to count
     *   }
     * })
    **/
    count<T extends orderdetailsCountArgs>(
      args?: Subset<T, orderdetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderdetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderdetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderdetailsAggregateArgs>(args: Subset<T, OrderdetailsAggregateArgs>): Prisma.PrismaPromise<GetOrderdetailsAggregateType<T>>

    /**
     * Group by Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderdetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderdetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderdetailsGroupByArgs['orderBy'] }
        : { orderBy?: OrderdetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderdetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderdetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for orderdetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__orderdetailsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orders<T extends ordersArgs= {}>(args?: Subset<T, ordersArgs>): Prisma__ordersClient<ordersGetPayload<T> | Null>;

    products<T extends productsArgs= {}>(args?: Subset<T, productsArgs>): Prisma__productsClient<productsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * orderdetails base type for findUnique actions
   */
  export type orderdetailsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where: orderdetailsWhereUniqueInput
  }

  /**
   * orderdetails findUnique
   */
  export interface orderdetailsFindUniqueArgs extends orderdetailsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orderdetails findUniqueOrThrow
   */
  export type orderdetailsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where: orderdetailsWhereUniqueInput
  }


  /**
   * orderdetails base type for findFirst actions
   */
  export type orderdetailsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderdetails.
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderdetails.
     */
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }

  /**
   * orderdetails findFirst
   */
  export interface orderdetailsFindFirstArgs extends orderdetailsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orderdetails findFirstOrThrow
   */
  export type orderdetailsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderdetails.
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderdetails.
     */
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * orderdetails findMany
   */
  export type orderdetailsFindManyArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderdetails.
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * orderdetails create
   */
  export type orderdetailsCreateArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * The data needed to create a orderdetails.
     */
    data: XOR<orderdetailsCreateInput, orderdetailsUncheckedCreateInput>
  }


  /**
   * orderdetails createMany
   */
  export type orderdetailsCreateManyArgs = {
    /**
     * The data used to create many orderdetails.
     */
    data: Enumerable<orderdetailsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orderdetails update
   */
  export type orderdetailsUpdateArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * The data needed to update a orderdetails.
     */
    data: XOR<orderdetailsUpdateInput, orderdetailsUncheckedUpdateInput>
    /**
     * Choose, which orderdetails to update.
     */
    where: orderdetailsWhereUniqueInput
  }


  /**
   * orderdetails updateMany
   */
  export type orderdetailsUpdateManyArgs = {
    /**
     * The data used to update orderdetails.
     */
    data: XOR<orderdetailsUpdateManyMutationInput, orderdetailsUncheckedUpdateManyInput>
    /**
     * Filter which orderdetails to update
     */
    where?: orderdetailsWhereInput
  }


  /**
   * orderdetails upsert
   */
  export type orderdetailsUpsertArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * The filter to search for the orderdetails to update in case it exists.
     */
    where: orderdetailsWhereUniqueInput
    /**
     * In case the orderdetails found by the `where` argument doesn't exist, create a new orderdetails with this data.
     */
    create: XOR<orderdetailsCreateInput, orderdetailsUncheckedCreateInput>
    /**
     * In case the orderdetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderdetailsUpdateInput, orderdetailsUncheckedUpdateInput>
  }


  /**
   * orderdetails delete
   */
  export type orderdetailsDeleteArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter which orderdetails to delete.
     */
    where: orderdetailsWhereUniqueInput
  }


  /**
   * orderdetails deleteMany
   */
  export type orderdetailsDeleteManyArgs = {
    /**
     * Filter which orderdetails to delete
     */
    where?: orderdetailsWhereInput
  }


  /**
   * orderdetails without action
   */
  export type orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
  }



  /**
   * Model orders
   */


  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    orderNumber: number | null
    customerNumber: number | null
  }

  export type OrdersSumAggregateOutputType = {
    orderNumber: number | null
    customerNumber: number | null
  }

  export type OrdersMinAggregateOutputType = {
    orderNumber: number | null
    orderDate: Date | null
    requiredDate: Date | null
    shippedDate: Date | null
    status: string | null
    comments: string | null
    customerNumber: number | null
  }

  export type OrdersMaxAggregateOutputType = {
    orderNumber: number | null
    orderDate: Date | null
    requiredDate: Date | null
    shippedDate: Date | null
    status: string | null
    comments: string | null
    customerNumber: number | null
  }

  export type OrdersCountAggregateOutputType = {
    orderNumber: number
    orderDate: number
    requiredDate: number
    shippedDate: number
    status: number
    comments: number
    customerNumber: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    orderNumber?: true
    customerNumber?: true
  }

  export type OrdersSumAggregateInputType = {
    orderNumber?: true
    customerNumber?: true
  }

  export type OrdersMinAggregateInputType = {
    orderNumber?: true
    orderDate?: true
    requiredDate?: true
    shippedDate?: true
    status?: true
    comments?: true
    customerNumber?: true
  }

  export type OrdersMaxAggregateInputType = {
    orderNumber?: true
    orderDate?: true
    requiredDate?: true
    shippedDate?: true
    status?: true
    comments?: true
    customerNumber?: true
  }

  export type OrdersCountAggregateInputType = {
    orderNumber?: true
    orderDate?: true
    requiredDate?: true
    shippedDate?: true
    status?: true
    comments?: true
    customerNumber?: true
    _all?: true
  }

  export type OrdersAggregateArgs = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type OrdersGroupByArgs = {
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithAggregationInput>
    by: OrdersScalarFieldEnum[]
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }


  export type OrdersGroupByOutputType = {
    orderNumber: number
    orderDate: Date
    requiredDate: Date
    shippedDate: Date | null
    status: string
    comments: string | null
    customerNumber: number
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends OrdersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect = {
    orderNumber?: boolean
    orderDate?: boolean
    requiredDate?: boolean
    shippedDate?: boolean
    status?: boolean
    comments?: boolean
    customerNumber?: boolean
    orderdetails?: boolean | orders$orderdetailsArgs
    customers?: boolean | customersArgs
    _count?: boolean | OrdersCountOutputTypeArgs
  }


  export type ordersInclude = {
    orderdetails?: boolean | orders$orderdetailsArgs
    customers?: boolean | customersArgs
    _count?: boolean | OrdersCountOutputTypeArgs
  }

  export type ordersGetPayload<S extends boolean | null | undefined | ordersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? orders :
    S extends undefined ? never :
    S extends { include: any } & (ordersArgs | ordersFindManyArgs)
    ? orders  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['include'][P]>>  :
        P extends 'customers' ? customersGetPayload<S['include'][P]> :
        P extends '_count' ? OrdersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ordersArgs | ordersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['select'][P]>>  :
        P extends 'customers' ? customersGetPayload<S['select'][P]> :
        P extends '_count' ? OrdersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof orders ? orders[P] : never
  } 
      : orders


  type ordersCountArgs = 
    Omit<ordersFindManyArgs, 'select' | 'include'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ordersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orders'> extends True ? Prisma__ordersClient<ordersGetPayload<T>> : Prisma__ordersClient<ordersGetPayload<T> | null, null>

    /**
     * Find one Orders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ordersFindUniqueOrThrowArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ordersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orders'> extends True ? Prisma__ordersClient<ordersGetPayload<T>> : Prisma__ordersClient<ordersGetPayload<T> | null, null>

    /**
     * Find the first Orders that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ordersFindFirstOrThrowArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `orderNumber`
     * const ordersWithOrderNumberOnly = await prisma.orders.findMany({ select: { orderNumber: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs>(
      args?: SelectSubset<T, ordersFindManyArgs>
    ): Prisma.PrismaPromise<Array<ordersGetPayload<T>>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs>(
      args: SelectSubset<T, ordersCreateArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Create many Orders.
     *     @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordersCreateManyArgs>(
      args?: SelectSubset<T, ordersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs>(
      args: SelectSubset<T, ordersDeleteArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs>(
      args: SelectSubset<T, ordersUpdateArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs>(
      args?: SelectSubset<T, ordersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs>(
      args: SelectSubset<T, ordersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs>(
      args: SelectSubset<T, ordersUpsertArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersGroupByArgs['orderBy'] }
        : { orderBy?: OrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ordersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orderdetails<T extends orders$orderdetailsArgs= {}>(args?: Subset<T, orders$orderdetailsArgs>): Prisma.PrismaPromise<Array<orderdetailsGetPayload<T>>| Null>;

    customers<T extends customersArgs= {}>(args?: Subset<T, customersArgs>): Prisma__customersClient<customersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * orders base type for findUnique actions
   */
  export type ordersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUnique
   */
  export interface ordersFindUniqueArgs extends ordersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders base type for findFirst actions
   */
  export type ordersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }

  /**
   * orders findFirst
   */
  export interface ordersFindFirstArgs extends ordersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders findMany
   */
  export type ordersFindManyArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders create
   */
  export type ordersCreateArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }


  /**
   * orders createMany
   */
  export type ordersCreateManyArgs = {
    /**
     * The data used to create many orders.
     */
    data: Enumerable<ordersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orders update
   */
  export type ordersUpdateArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }


  /**
   * orders upsert
   */
  export type ordersUpsertArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }


  /**
   * orders delete
   */
  export type ordersDeleteArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }


  /**
   * orders.orderdetails
   */
  export type orders$orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    where?: orderdetailsWhereInput
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    cursor?: orderdetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * orders without action
   */
  export type ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
  }



  /**
   * Model payments
   */


  export type AggregatePayments = {
    _count: PaymentsCountAggregateOutputType | null
    _avg: PaymentsAvgAggregateOutputType | null
    _sum: PaymentsSumAggregateOutputType | null
    _min: PaymentsMinAggregateOutputType | null
    _max: PaymentsMaxAggregateOutputType | null
  }

  export type PaymentsAvgAggregateOutputType = {
    customerNumber: number | null
    amount: Decimal | null
  }

  export type PaymentsSumAggregateOutputType = {
    customerNumber: number | null
    amount: Decimal | null
  }

  export type PaymentsMinAggregateOutputType = {
    customerNumber: number | null
    checkNumber: string | null
    paymentDate: Date | null
    amount: Decimal | null
  }

  export type PaymentsMaxAggregateOutputType = {
    customerNumber: number | null
    checkNumber: string | null
    paymentDate: Date | null
    amount: Decimal | null
  }

  export type PaymentsCountAggregateOutputType = {
    customerNumber: number
    checkNumber: number
    paymentDate: number
    amount: number
    _all: number
  }


  export type PaymentsAvgAggregateInputType = {
    customerNumber?: true
    amount?: true
  }

  export type PaymentsSumAggregateInputType = {
    customerNumber?: true
    amount?: true
  }

  export type PaymentsMinAggregateInputType = {
    customerNumber?: true
    checkNumber?: true
    paymentDate?: true
    amount?: true
  }

  export type PaymentsMaxAggregateInputType = {
    customerNumber?: true
    checkNumber?: true
    paymentDate?: true
    amount?: true
  }

  export type PaymentsCountAggregateInputType = {
    customerNumber?: true
    checkNumber?: true
    paymentDate?: true
    amount?: true
    _all?: true
  }

  export type PaymentsAggregateArgs = {
    /**
     * Filter which payments to aggregate.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: Enumerable<paymentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentsMaxAggregateInputType
  }

  export type GetPaymentsAggregateType<T extends PaymentsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayments[P]>
      : GetScalarType<T[P], AggregatePayments[P]>
  }




  export type PaymentsGroupByArgs = {
    where?: paymentsWhereInput
    orderBy?: Enumerable<paymentsOrderByWithAggregationInput>
    by: PaymentsScalarFieldEnum[]
    having?: paymentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentsCountAggregateInputType | true
    _avg?: PaymentsAvgAggregateInputType
    _sum?: PaymentsSumAggregateInputType
    _min?: PaymentsMinAggregateInputType
    _max?: PaymentsMaxAggregateInputType
  }


  export type PaymentsGroupByOutputType = {
    customerNumber: number
    checkNumber: string
    paymentDate: Date
    amount: Decimal
    _count: PaymentsCountAggregateOutputType | null
    _avg: PaymentsAvgAggregateOutputType | null
    _sum: PaymentsSumAggregateOutputType | null
    _min: PaymentsMinAggregateOutputType | null
    _max: PaymentsMaxAggregateOutputType | null
  }

  type GetPaymentsGroupByPayload<T extends PaymentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PaymentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentsGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentsGroupByOutputType[P]>
        }
      >
    >


  export type paymentsSelect = {
    customerNumber?: boolean
    checkNumber?: boolean
    paymentDate?: boolean
    amount?: boolean
    customers?: boolean | customersArgs
  }


  export type paymentsInclude = {
    customers?: boolean | customersArgs
  }

  export type paymentsGetPayload<S extends boolean | null | undefined | paymentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? payments :
    S extends undefined ? never :
    S extends { include: any } & (paymentsArgs | paymentsFindManyArgs)
    ? payments  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'customers' ? customersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (paymentsArgs | paymentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'customers' ? customersGetPayload<S['select'][P]> :  P extends keyof payments ? payments[P] : never
  } 
      : payments


  type paymentsCountArgs = 
    Omit<paymentsFindManyArgs, 'select' | 'include'> & {
      select?: PaymentsCountAggregateInputType | true
    }

  export interface paymentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Payments that matches the filter.
     * @param {paymentsFindUniqueArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends paymentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, paymentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'payments'> extends True ? Prisma__paymentsClient<paymentsGetPayload<T>> : Prisma__paymentsClient<paymentsGetPayload<T> | null, null>

    /**
     * Find one Payments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {paymentsFindUniqueOrThrowArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends paymentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, paymentsFindUniqueOrThrowArgs>
    ): Prisma__paymentsClient<paymentsGetPayload<T>>

    /**
     * Find the first Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindFirstArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends paymentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, paymentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'payments'> extends True ? Prisma__paymentsClient<paymentsGetPayload<T>> : Prisma__paymentsClient<paymentsGetPayload<T> | null, null>

    /**
     * Find the first Payments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindFirstOrThrowArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends paymentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, paymentsFindFirstOrThrowArgs>
    ): Prisma__paymentsClient<paymentsGetPayload<T>>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payments.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payments.findMany({ take: 10 })
     * 
     * // Only select the `customerNumber`
     * const paymentsWithCustomerNumberOnly = await prisma.payments.findMany({ select: { customerNumber: true } })
     * 
    **/
    findMany<T extends paymentsFindManyArgs>(
      args?: SelectSubset<T, paymentsFindManyArgs>
    ): Prisma.PrismaPromise<Array<paymentsGetPayload<T>>>

    /**
     * Create a Payments.
     * @param {paymentsCreateArgs} args - Arguments to create a Payments.
     * @example
     * // Create one Payments
     * const Payments = await prisma.payments.create({
     *   data: {
     *     // ... data to create a Payments
     *   }
     * })
     * 
    **/
    create<T extends paymentsCreateArgs>(
      args: SelectSubset<T, paymentsCreateArgs>
    ): Prisma__paymentsClient<paymentsGetPayload<T>>

    /**
     * Create many Payments.
     *     @param {paymentsCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payments = await prisma.payments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends paymentsCreateManyArgs>(
      args?: SelectSubset<T, paymentsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payments.
     * @param {paymentsDeleteArgs} args - Arguments to delete one Payments.
     * @example
     * // Delete one Payments
     * const Payments = await prisma.payments.delete({
     *   where: {
     *     // ... filter to delete one Payments
     *   }
     * })
     * 
    **/
    delete<T extends paymentsDeleteArgs>(
      args: SelectSubset<T, paymentsDeleteArgs>
    ): Prisma__paymentsClient<paymentsGetPayload<T>>

    /**
     * Update one Payments.
     * @param {paymentsUpdateArgs} args - Arguments to update one Payments.
     * @example
     * // Update one Payments
     * const payments = await prisma.payments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends paymentsUpdateArgs>(
      args: SelectSubset<T, paymentsUpdateArgs>
    ): Prisma__paymentsClient<paymentsGetPayload<T>>

    /**
     * Delete zero or more Payments.
     * @param {paymentsDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends paymentsDeleteManyArgs>(
      args?: SelectSubset<T, paymentsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payments = await prisma.payments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends paymentsUpdateManyArgs>(
      args: SelectSubset<T, paymentsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payments.
     * @param {paymentsUpsertArgs} args - Arguments to update or create a Payments.
     * @example
     * // Update or create a Payments
     * const payments = await prisma.payments.upsert({
     *   create: {
     *     // ... data to create a Payments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payments we want to update
     *   }
     * })
    **/
    upsert<T extends paymentsUpsertArgs>(
      args: SelectSubset<T, paymentsUpsertArgs>
    ): Prisma__paymentsClient<paymentsGetPayload<T>>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payments.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentsCountArgs>(
      args?: Subset<T, paymentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentsAggregateArgs>(args: Subset<T, PaymentsAggregateArgs>): Prisma.PrismaPromise<GetPaymentsAggregateType<T>>

    /**
     * Group by Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentsGroupByArgs['orderBy'] }
        : { orderBy?: PaymentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for payments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__paymentsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    customers<T extends customersArgs= {}>(args?: Subset<T, customersArgs>): Prisma__customersClient<customersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * payments base type for findUnique actions
   */
  export type paymentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * Filter, which payments to fetch.
     */
    where: paymentsWhereUniqueInput
  }

  /**
   * payments findUnique
   */
  export interface paymentsFindUniqueArgs extends paymentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * payments findUniqueOrThrow
   */
  export type paymentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * Filter, which payments to fetch.
     */
    where: paymentsWhereUniqueInput
  }


  /**
   * payments base type for findFirst actions
   */
  export type paymentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: Enumerable<paymentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: Enumerable<PaymentsScalarFieldEnum>
  }

  /**
   * payments findFirst
   */
  export interface paymentsFindFirstArgs extends paymentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * payments findFirstOrThrow
   */
  export type paymentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: Enumerable<paymentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: Enumerable<PaymentsScalarFieldEnum>
  }


  /**
   * payments findMany
   */
  export type paymentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: Enumerable<paymentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: Enumerable<PaymentsScalarFieldEnum>
  }


  /**
   * payments create
   */
  export type paymentsCreateArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * The data needed to create a payments.
     */
    data: XOR<paymentsCreateInput, paymentsUncheckedCreateInput>
  }


  /**
   * payments createMany
   */
  export type paymentsCreateManyArgs = {
    /**
     * The data used to create many payments.
     */
    data: Enumerable<paymentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * payments update
   */
  export type paymentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * The data needed to update a payments.
     */
    data: XOR<paymentsUpdateInput, paymentsUncheckedUpdateInput>
    /**
     * Choose, which payments to update.
     */
    where: paymentsWhereUniqueInput
  }


  /**
   * payments updateMany
   */
  export type paymentsUpdateManyArgs = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentsUpdateManyMutationInput, paymentsUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentsWhereInput
  }


  /**
   * payments upsert
   */
  export type paymentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * The filter to search for the payments to update in case it exists.
     */
    where: paymentsWhereUniqueInput
    /**
     * In case the payments found by the `where` argument doesn't exist, create a new payments with this data.
     */
    create: XOR<paymentsCreateInput, paymentsUncheckedCreateInput>
    /**
     * In case the payments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentsUpdateInput, paymentsUncheckedUpdateInput>
  }


  /**
   * payments delete
   */
  export type paymentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
    /**
     * Filter which payments to delete.
     */
    where: paymentsWhereUniqueInput
  }


  /**
   * payments deleteMany
   */
  export type paymentsDeleteManyArgs = {
    /**
     * Filter which payments to delete
     */
    where?: paymentsWhereInput
  }


  /**
   * payments without action
   */
  export type paymentsArgs = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentsInclude | null
  }



  /**
   * Model productlines
   */


  export type AggregateProductlines = {
    _count: ProductlinesCountAggregateOutputType | null
    _min: ProductlinesMinAggregateOutputType | null
    _max: ProductlinesMaxAggregateOutputType | null
  }

  export type ProductlinesMinAggregateOutputType = {
    productLine: string | null
    textDescription: string | null
    htmlDescription: string | null
    image: Buffer | null
  }

  export type ProductlinesMaxAggregateOutputType = {
    productLine: string | null
    textDescription: string | null
    htmlDescription: string | null
    image: Buffer | null
  }

  export type ProductlinesCountAggregateOutputType = {
    productLine: number
    textDescription: number
    htmlDescription: number
    image: number
    _all: number
  }


  export type ProductlinesMinAggregateInputType = {
    productLine?: true
    textDescription?: true
    htmlDescription?: true
    image?: true
  }

  export type ProductlinesMaxAggregateInputType = {
    productLine?: true
    textDescription?: true
    htmlDescription?: true
    image?: true
  }

  export type ProductlinesCountAggregateInputType = {
    productLine?: true
    textDescription?: true
    htmlDescription?: true
    image?: true
    _all?: true
  }

  export type ProductlinesAggregateArgs = {
    /**
     * Filter which productlines to aggregate.
     */
    where?: productlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productlines to fetch.
     */
    orderBy?: Enumerable<productlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productlines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productlines
    **/
    _count?: true | ProductlinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductlinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductlinesMaxAggregateInputType
  }

  export type GetProductlinesAggregateType<T extends ProductlinesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductlines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductlines[P]>
      : GetScalarType<T[P], AggregateProductlines[P]>
  }




  export type ProductlinesGroupByArgs = {
    where?: productlinesWhereInput
    orderBy?: Enumerable<productlinesOrderByWithAggregationInput>
    by: ProductlinesScalarFieldEnum[]
    having?: productlinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductlinesCountAggregateInputType | true
    _min?: ProductlinesMinAggregateInputType
    _max?: ProductlinesMaxAggregateInputType
  }


  export type ProductlinesGroupByOutputType = {
    productLine: string
    textDescription: string | null
    htmlDescription: string | null
    image: Buffer | null
    _count: ProductlinesCountAggregateOutputType | null
    _min: ProductlinesMinAggregateOutputType | null
    _max: ProductlinesMaxAggregateOutputType | null
  }

  type GetProductlinesGroupByPayload<T extends ProductlinesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductlinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductlinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductlinesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductlinesGroupByOutputType[P]>
        }
      >
    >


  export type productlinesSelect = {
    productLine?: boolean
    textDescription?: boolean
    htmlDescription?: boolean
    image?: boolean
    products?: boolean | productlines$productsArgs
    _count?: boolean | ProductlinesCountOutputTypeArgs
  }


  export type productlinesInclude = {
    products?: boolean | productlines$productsArgs
    _count?: boolean | ProductlinesCountOutputTypeArgs
  }

  export type productlinesGetPayload<S extends boolean | null | undefined | productlinesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? productlines :
    S extends undefined ? never :
    S extends { include: any } & (productlinesArgs | productlinesFindManyArgs)
    ? productlines  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'products' ? Array < productsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductlinesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productlinesArgs | productlinesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'products' ? Array < productsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductlinesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof productlines ? productlines[P] : never
  } 
      : productlines


  type productlinesCountArgs = 
    Omit<productlinesFindManyArgs, 'select' | 'include'> & {
      select?: ProductlinesCountAggregateInputType | true
    }

  export interface productlinesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Productlines that matches the filter.
     * @param {productlinesFindUniqueArgs} args - Arguments to find a Productlines
     * @example
     * // Get one Productlines
     * const productlines = await prisma.productlines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productlinesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productlinesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'productlines'> extends True ? Prisma__productlinesClient<productlinesGetPayload<T>> : Prisma__productlinesClient<productlinesGetPayload<T> | null, null>

    /**
     * Find one Productlines that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productlinesFindUniqueOrThrowArgs} args - Arguments to find a Productlines
     * @example
     * // Get one Productlines
     * const productlines = await prisma.productlines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productlinesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productlinesFindUniqueOrThrowArgs>
    ): Prisma__productlinesClient<productlinesGetPayload<T>>

    /**
     * Find the first Productlines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productlinesFindFirstArgs} args - Arguments to find a Productlines
     * @example
     * // Get one Productlines
     * const productlines = await prisma.productlines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productlinesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productlinesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'productlines'> extends True ? Prisma__productlinesClient<productlinesGetPayload<T>> : Prisma__productlinesClient<productlinesGetPayload<T> | null, null>

    /**
     * Find the first Productlines that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productlinesFindFirstOrThrowArgs} args - Arguments to find a Productlines
     * @example
     * // Get one Productlines
     * const productlines = await prisma.productlines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productlinesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productlinesFindFirstOrThrowArgs>
    ): Prisma__productlinesClient<productlinesGetPayload<T>>

    /**
     * Find zero or more Productlines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productlinesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productlines
     * const productlines = await prisma.productlines.findMany()
     * 
     * // Get first 10 Productlines
     * const productlines = await prisma.productlines.findMany({ take: 10 })
     * 
     * // Only select the `productLine`
     * const productlinesWithProductLineOnly = await prisma.productlines.findMany({ select: { productLine: true } })
     * 
    **/
    findMany<T extends productlinesFindManyArgs>(
      args?: SelectSubset<T, productlinesFindManyArgs>
    ): Prisma.PrismaPromise<Array<productlinesGetPayload<T>>>

    /**
     * Create a Productlines.
     * @param {productlinesCreateArgs} args - Arguments to create a Productlines.
     * @example
     * // Create one Productlines
     * const Productlines = await prisma.productlines.create({
     *   data: {
     *     // ... data to create a Productlines
     *   }
     * })
     * 
    **/
    create<T extends productlinesCreateArgs>(
      args: SelectSubset<T, productlinesCreateArgs>
    ): Prisma__productlinesClient<productlinesGetPayload<T>>

    /**
     * Create many Productlines.
     *     @param {productlinesCreateManyArgs} args - Arguments to create many Productlines.
     *     @example
     *     // Create many Productlines
     *     const productlines = await prisma.productlines.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productlinesCreateManyArgs>(
      args?: SelectSubset<T, productlinesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Productlines.
     * @param {productlinesDeleteArgs} args - Arguments to delete one Productlines.
     * @example
     * // Delete one Productlines
     * const Productlines = await prisma.productlines.delete({
     *   where: {
     *     // ... filter to delete one Productlines
     *   }
     * })
     * 
    **/
    delete<T extends productlinesDeleteArgs>(
      args: SelectSubset<T, productlinesDeleteArgs>
    ): Prisma__productlinesClient<productlinesGetPayload<T>>

    /**
     * Update one Productlines.
     * @param {productlinesUpdateArgs} args - Arguments to update one Productlines.
     * @example
     * // Update one Productlines
     * const productlines = await prisma.productlines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productlinesUpdateArgs>(
      args: SelectSubset<T, productlinesUpdateArgs>
    ): Prisma__productlinesClient<productlinesGetPayload<T>>

    /**
     * Delete zero or more Productlines.
     * @param {productlinesDeleteManyArgs} args - Arguments to filter Productlines to delete.
     * @example
     * // Delete a few Productlines
     * const { count } = await prisma.productlines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productlinesDeleteManyArgs>(
      args?: SelectSubset<T, productlinesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productlinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productlines
     * const productlines = await prisma.productlines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productlinesUpdateManyArgs>(
      args: SelectSubset<T, productlinesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Productlines.
     * @param {productlinesUpsertArgs} args - Arguments to update or create a Productlines.
     * @example
     * // Update or create a Productlines
     * const productlines = await prisma.productlines.upsert({
     *   create: {
     *     // ... data to create a Productlines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Productlines we want to update
     *   }
     * })
    **/
    upsert<T extends productlinesUpsertArgs>(
      args: SelectSubset<T, productlinesUpsertArgs>
    ): Prisma__productlinesClient<productlinesGetPayload<T>>

    /**
     * Count the number of Productlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productlinesCountArgs} args - Arguments to filter Productlines to count.
     * @example
     * // Count the number of Productlines
     * const count = await prisma.productlines.count({
     *   where: {
     *     // ... the filter for the Productlines we want to count
     *   }
     * })
    **/
    count<T extends productlinesCountArgs>(
      args?: Subset<T, productlinesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductlinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Productlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductlinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductlinesAggregateArgs>(args: Subset<T, ProductlinesAggregateArgs>): Prisma.PrismaPromise<GetProductlinesAggregateType<T>>

    /**
     * Group by Productlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductlinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductlinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductlinesGroupByArgs['orderBy'] }
        : { orderBy?: ProductlinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductlinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductlinesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for productlines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productlinesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    products<T extends productlines$productsArgs= {}>(args?: Subset<T, productlines$productsArgs>): Prisma.PrismaPromise<Array<productsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * productlines base type for findUnique actions
   */
  export type productlinesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * Filter, which productlines to fetch.
     */
    where: productlinesWhereUniqueInput
  }

  /**
   * productlines findUnique
   */
  export interface productlinesFindUniqueArgs extends productlinesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * productlines findUniqueOrThrow
   */
  export type productlinesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * Filter, which productlines to fetch.
     */
    where: productlinesWhereUniqueInput
  }


  /**
   * productlines base type for findFirst actions
   */
  export type productlinesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * Filter, which productlines to fetch.
     */
    where?: productlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productlines to fetch.
     */
    orderBy?: Enumerable<productlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productlines.
     */
    cursor?: productlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productlines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productlines.
     */
    distinct?: Enumerable<ProductlinesScalarFieldEnum>
  }

  /**
   * productlines findFirst
   */
  export interface productlinesFindFirstArgs extends productlinesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * productlines findFirstOrThrow
   */
  export type productlinesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * Filter, which productlines to fetch.
     */
    where?: productlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productlines to fetch.
     */
    orderBy?: Enumerable<productlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productlines.
     */
    cursor?: productlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productlines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productlines.
     */
    distinct?: Enumerable<ProductlinesScalarFieldEnum>
  }


  /**
   * productlines findMany
   */
  export type productlinesFindManyArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * Filter, which productlines to fetch.
     */
    where?: productlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productlines to fetch.
     */
    orderBy?: Enumerable<productlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productlines.
     */
    cursor?: productlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productlines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productlines.
     */
    skip?: number
    distinct?: Enumerable<ProductlinesScalarFieldEnum>
  }


  /**
   * productlines create
   */
  export type productlinesCreateArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * The data needed to create a productlines.
     */
    data: XOR<productlinesCreateInput, productlinesUncheckedCreateInput>
  }


  /**
   * productlines createMany
   */
  export type productlinesCreateManyArgs = {
    /**
     * The data used to create many productlines.
     */
    data: Enumerable<productlinesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * productlines update
   */
  export type productlinesUpdateArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * The data needed to update a productlines.
     */
    data: XOR<productlinesUpdateInput, productlinesUncheckedUpdateInput>
    /**
     * Choose, which productlines to update.
     */
    where: productlinesWhereUniqueInput
  }


  /**
   * productlines updateMany
   */
  export type productlinesUpdateManyArgs = {
    /**
     * The data used to update productlines.
     */
    data: XOR<productlinesUpdateManyMutationInput, productlinesUncheckedUpdateManyInput>
    /**
     * Filter which productlines to update
     */
    where?: productlinesWhereInput
  }


  /**
   * productlines upsert
   */
  export type productlinesUpsertArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * The filter to search for the productlines to update in case it exists.
     */
    where: productlinesWhereUniqueInput
    /**
     * In case the productlines found by the `where` argument doesn't exist, create a new productlines with this data.
     */
    create: XOR<productlinesCreateInput, productlinesUncheckedCreateInput>
    /**
     * In case the productlines was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productlinesUpdateInput, productlinesUncheckedUpdateInput>
  }


  /**
   * productlines delete
   */
  export type productlinesDeleteArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
    /**
     * Filter which productlines to delete.
     */
    where: productlinesWhereUniqueInput
  }


  /**
   * productlines deleteMany
   */
  export type productlinesDeleteManyArgs = {
    /**
     * Filter which productlines to delete
     */
    where?: productlinesWhereInput
  }


  /**
   * productlines.products
   */
  export type productlines$productsArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    where?: productsWhereInput
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * productlines without action
   */
  export type productlinesArgs = {
    /**
     * Select specific fields to fetch from the productlines
     */
    select?: productlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productlinesInclude | null
  }



  /**
   * Model products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    quantityInStock: number | null
    buyPrice: Decimal | null
    MSRP: Decimal | null
  }

  export type ProductsSumAggregateOutputType = {
    quantityInStock: number | null
    buyPrice: Decimal | null
    MSRP: Decimal | null
  }

  export type ProductsMinAggregateOutputType = {
    productCode: string | null
    productName: string | null
    productLine: string | null
    productScale: string | null
    productVendor: string | null
    productDescription: string | null
    quantityInStock: number | null
    buyPrice: Decimal | null
    MSRP: Decimal | null
  }

  export type ProductsMaxAggregateOutputType = {
    productCode: string | null
    productName: string | null
    productLine: string | null
    productScale: string | null
    productVendor: string | null
    productDescription: string | null
    quantityInStock: number | null
    buyPrice: Decimal | null
    MSRP: Decimal | null
  }

  export type ProductsCountAggregateOutputType = {
    productCode: number
    productName: number
    productLine: number
    productScale: number
    productVendor: number
    productDescription: number
    quantityInStock: number
    buyPrice: number
    MSRP: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    quantityInStock?: true
    buyPrice?: true
    MSRP?: true
  }

  export type ProductsSumAggregateInputType = {
    quantityInStock?: true
    buyPrice?: true
    MSRP?: true
  }

  export type ProductsMinAggregateInputType = {
    productCode?: true
    productName?: true
    productLine?: true
    productScale?: true
    productVendor?: true
    productDescription?: true
    quantityInStock?: true
    buyPrice?: true
    MSRP?: true
  }

  export type ProductsMaxAggregateInputType = {
    productCode?: true
    productName?: true
    productLine?: true
    productScale?: true
    productVendor?: true
    productDescription?: true
    quantityInStock?: true
    buyPrice?: true
    MSRP?: true
  }

  export type ProductsCountAggregateInputType = {
    productCode?: true
    productName?: true
    productLine?: true
    productScale?: true
    productVendor?: true
    productDescription?: true
    quantityInStock?: true
    buyPrice?: true
    MSRP?: true
    _all?: true
  }

  export type ProductsAggregateArgs = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs = {
    where?: productsWhereInput
    orderBy?: Enumerable<productsOrderByWithAggregationInput>
    by: ProductsScalarFieldEnum[]
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    productCode: string
    productName: string
    productLine: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal
    MSRP: Decimal
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect = {
    productCode?: boolean
    productName?: boolean
    productLine?: boolean
    productScale?: boolean
    productVendor?: boolean
    productDescription?: boolean
    quantityInStock?: boolean
    buyPrice?: boolean
    MSRP?: boolean
    orderdetails?: boolean | products$orderdetailsArgs
    productlines?: boolean | productlinesArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }


  export type productsInclude = {
    orderdetails?: boolean | products$orderdetailsArgs
    productlines?: boolean | productlinesArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }

  export type productsGetPayload<S extends boolean | null | undefined | productsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? products :
    S extends undefined ? never :
    S extends { include: any } & (productsArgs | productsFindManyArgs)
    ? products  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['include'][P]>>  :
        P extends 'productlines' ? productlinesGetPayload<S['include'][P]> :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productsArgs | productsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['select'][P]>>  :
        P extends 'productlines' ? productlinesGetPayload<S['select'][P]> :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof products ? products[P] : never
  } 
      : products


  type productsCountArgs = 
    Omit<productsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'products'> extends True ? Prisma__productsClient<productsGetPayload<T>> : Prisma__productsClient<productsGetPayload<T> | null, null>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'products'> extends True ? Prisma__productsClient<productsGetPayload<T>> : Prisma__productsClient<productsGetPayload<T> | null, null>

    /**
     * Find the first Products that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `productCode`
     * const productsWithProductCodeOnly = await prisma.products.findMany({ select: { productCode: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs>(
      args?: SelectSubset<T, productsFindManyArgs>
    ): Prisma.PrismaPromise<Array<productsGetPayload<T>>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs>(
      args: SelectSubset<T, productsCreateArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Create many Products.
     *     @param {productsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productsCreateManyArgs>(
      args?: SelectSubset<T, productsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs>(
      args: SelectSubset<T, productsDeleteArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs>(
      args: SelectSubset<T, productsUpdateArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs>(
      args?: SelectSubset<T, productsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs>(
      args: SelectSubset<T, productsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs>(
      args: SelectSubset<T, productsUpsertArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orderdetails<T extends products$orderdetailsArgs= {}>(args?: Subset<T, products$orderdetailsArgs>): Prisma.PrismaPromise<Array<orderdetailsGetPayload<T>>| Null>;

    productlines<T extends productlinesArgs= {}>(args?: Subset<T, productlinesArgs>): Prisma__productlinesClient<productlinesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * products base type for findUnique actions
   */
  export type productsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUnique
   */
  export interface productsFindUniqueArgs extends productsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products base type for findFirst actions
   */
  export type productsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }

  /**
   * products findFirst
   */
  export interface productsFindFirstArgs extends productsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * products findMany
   */
  export type productsFindManyArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * products create
   */
  export type productsCreateArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }


  /**
   * products createMany
   */
  export type productsCreateManyArgs = {
    /**
     * The data used to create many products.
     */
    data: Enumerable<productsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * products update
   */
  export type productsUpdateArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products updateMany
   */
  export type productsUpdateManyArgs = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }


  /**
   * products upsert
   */
  export type productsUpsertArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }


  /**
   * products delete
   */
  export type productsDeleteArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }


  /**
   * products.orderdetails
   */
  export type products$orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    where?: orderdetailsWhereInput
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    cursor?: orderdetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * products without action
   */
  export type productsArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
  }



  /**
   * Model temp_orderdetails
   */


  export type AggregateTemp_orderdetails = {
    _count: Temp_orderdetailsCountAggregateOutputType | null
    _avg: Temp_orderdetailsAvgAggregateOutputType | null
    _sum: Temp_orderdetailsSumAggregateOutputType | null
    _min: Temp_orderdetailsMinAggregateOutputType | null
    _max: Temp_orderdetailsMaxAggregateOutputType | null
  }

  export type Temp_orderdetailsAvgAggregateOutputType = {
    orderLineNumber: number | null
    orderNumber: number | null
    priceEach: Decimal | null
    quantityOrdered: number | null
  }

  export type Temp_orderdetailsSumAggregateOutputType = {
    orderLineNumber: number | null
    orderNumber: number | null
    priceEach: Decimal | null
    quantityOrdered: number | null
  }

  export type Temp_orderdetailsMinAggregateOutputType = {
    orderLineNumber: number | null
    orderNumber: number | null
    priceEach: Decimal | null
    productCode: string | null
    quantityOrdered: number | null
  }

  export type Temp_orderdetailsMaxAggregateOutputType = {
    orderLineNumber: number | null
    orderNumber: number | null
    priceEach: Decimal | null
    productCode: string | null
    quantityOrdered: number | null
  }

  export type Temp_orderdetailsCountAggregateOutputType = {
    orderLineNumber: number
    orderNumber: number
    priceEach: number
    productCode: number
    quantityOrdered: number
    _all: number
  }


  export type Temp_orderdetailsAvgAggregateInputType = {
    orderLineNumber?: true
    orderNumber?: true
    priceEach?: true
    quantityOrdered?: true
  }

  export type Temp_orderdetailsSumAggregateInputType = {
    orderLineNumber?: true
    orderNumber?: true
    priceEach?: true
    quantityOrdered?: true
  }

  export type Temp_orderdetailsMinAggregateInputType = {
    orderLineNumber?: true
    orderNumber?: true
    priceEach?: true
    productCode?: true
    quantityOrdered?: true
  }

  export type Temp_orderdetailsMaxAggregateInputType = {
    orderLineNumber?: true
    orderNumber?: true
    priceEach?: true
    productCode?: true
    quantityOrdered?: true
  }

  export type Temp_orderdetailsCountAggregateInputType = {
    orderLineNumber?: true
    orderNumber?: true
    priceEach?: true
    productCode?: true
    quantityOrdered?: true
    _all?: true
  }

  export type Temp_orderdetailsAggregateArgs = {
    /**
     * Filter which temp_orderdetails to aggregate.
     */
    where?: temp_orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temp_orderdetails to fetch.
     */
    orderBy?: Enumerable<temp_orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: temp_orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temp_orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temp_orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned temp_orderdetails
    **/
    _count?: true | Temp_orderdetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Temp_orderdetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Temp_orderdetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Temp_orderdetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Temp_orderdetailsMaxAggregateInputType
  }

  export type GetTemp_orderdetailsAggregateType<T extends Temp_orderdetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateTemp_orderdetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemp_orderdetails[P]>
      : GetScalarType<T[P], AggregateTemp_orderdetails[P]>
  }




  export type Temp_orderdetailsGroupByArgs = {
    where?: temp_orderdetailsWhereInput
    orderBy?: Enumerable<temp_orderdetailsOrderByWithAggregationInput>
    by: Temp_orderdetailsScalarFieldEnum[]
    having?: temp_orderdetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Temp_orderdetailsCountAggregateInputType | true
    _avg?: Temp_orderdetailsAvgAggregateInputType
    _sum?: Temp_orderdetailsSumAggregateInputType
    _min?: Temp_orderdetailsMinAggregateInputType
    _max?: Temp_orderdetailsMaxAggregateInputType
  }


  export type Temp_orderdetailsGroupByOutputType = {
    orderLineNumber: number | null
    orderNumber: number
    priceEach: Decimal | null
    productCode: string
    quantityOrdered: number | null
    _count: Temp_orderdetailsCountAggregateOutputType | null
    _avg: Temp_orderdetailsAvgAggregateOutputType | null
    _sum: Temp_orderdetailsSumAggregateOutputType | null
    _min: Temp_orderdetailsMinAggregateOutputType | null
    _max: Temp_orderdetailsMaxAggregateOutputType | null
  }

  type GetTemp_orderdetailsGroupByPayload<T extends Temp_orderdetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Temp_orderdetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Temp_orderdetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Temp_orderdetailsGroupByOutputType[P]>
            : GetScalarType<T[P], Temp_orderdetailsGroupByOutputType[P]>
        }
      >
    >


  export type temp_orderdetailsSelect = {
    orderLineNumber?: boolean
    orderNumber?: boolean
    priceEach?: boolean
    productCode?: boolean
    quantityOrdered?: boolean
  }


  export type temp_orderdetailsGetPayload<S extends boolean | null | undefined | temp_orderdetailsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? temp_orderdetails :
    S extends undefined ? never :
    S extends { include: any } & (temp_orderdetailsArgs | temp_orderdetailsFindManyArgs)
    ? temp_orderdetails 
    : S extends { select: any } & (temp_orderdetailsArgs | temp_orderdetailsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof temp_orderdetails ? temp_orderdetails[P] : never
  } 
      : temp_orderdetails


  type temp_orderdetailsCountArgs = 
    Omit<temp_orderdetailsFindManyArgs, 'select' | 'include'> & {
      select?: Temp_orderdetailsCountAggregateInputType | true
    }

  export interface temp_orderdetailsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Temp_orderdetails that matches the filter.
     * @param {temp_orderdetailsFindUniqueArgs} args - Arguments to find a Temp_orderdetails
     * @example
     * // Get one Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends temp_orderdetailsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, temp_orderdetailsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'temp_orderdetails'> extends True ? Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>> : Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T> | null, null>

    /**
     * Find one Temp_orderdetails that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {temp_orderdetailsFindUniqueOrThrowArgs} args - Arguments to find a Temp_orderdetails
     * @example
     * // Get one Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends temp_orderdetailsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, temp_orderdetailsFindUniqueOrThrowArgs>
    ): Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>>

    /**
     * Find the first Temp_orderdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temp_orderdetailsFindFirstArgs} args - Arguments to find a Temp_orderdetails
     * @example
     * // Get one Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends temp_orderdetailsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, temp_orderdetailsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'temp_orderdetails'> extends True ? Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>> : Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T> | null, null>

    /**
     * Find the first Temp_orderdetails that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temp_orderdetailsFindFirstOrThrowArgs} args - Arguments to find a Temp_orderdetails
     * @example
     * // Get one Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends temp_orderdetailsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, temp_orderdetailsFindFirstOrThrowArgs>
    ): Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>>

    /**
     * Find zero or more Temp_orderdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temp_orderdetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.findMany()
     * 
     * // Get first 10 Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.findMany({ take: 10 })
     * 
     * // Only select the `orderLineNumber`
     * const temp_orderdetailsWithOrderLineNumberOnly = await prisma.temp_orderdetails.findMany({ select: { orderLineNumber: true } })
     * 
    **/
    findMany<T extends temp_orderdetailsFindManyArgs>(
      args?: SelectSubset<T, temp_orderdetailsFindManyArgs>
    ): Prisma.PrismaPromise<Array<temp_orderdetailsGetPayload<T>>>

    /**
     * Create a Temp_orderdetails.
     * @param {temp_orderdetailsCreateArgs} args - Arguments to create a Temp_orderdetails.
     * @example
     * // Create one Temp_orderdetails
     * const Temp_orderdetails = await prisma.temp_orderdetails.create({
     *   data: {
     *     // ... data to create a Temp_orderdetails
     *   }
     * })
     * 
    **/
    create<T extends temp_orderdetailsCreateArgs>(
      args: SelectSubset<T, temp_orderdetailsCreateArgs>
    ): Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>>

    /**
     * Create many Temp_orderdetails.
     *     @param {temp_orderdetailsCreateManyArgs} args - Arguments to create many Temp_orderdetails.
     *     @example
     *     // Create many Temp_orderdetails
     *     const temp_orderdetails = await prisma.temp_orderdetails.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends temp_orderdetailsCreateManyArgs>(
      args?: SelectSubset<T, temp_orderdetailsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Temp_orderdetails.
     * @param {temp_orderdetailsDeleteArgs} args - Arguments to delete one Temp_orderdetails.
     * @example
     * // Delete one Temp_orderdetails
     * const Temp_orderdetails = await prisma.temp_orderdetails.delete({
     *   where: {
     *     // ... filter to delete one Temp_orderdetails
     *   }
     * })
     * 
    **/
    delete<T extends temp_orderdetailsDeleteArgs>(
      args: SelectSubset<T, temp_orderdetailsDeleteArgs>
    ): Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>>

    /**
     * Update one Temp_orderdetails.
     * @param {temp_orderdetailsUpdateArgs} args - Arguments to update one Temp_orderdetails.
     * @example
     * // Update one Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends temp_orderdetailsUpdateArgs>(
      args: SelectSubset<T, temp_orderdetailsUpdateArgs>
    ): Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>>

    /**
     * Delete zero or more Temp_orderdetails.
     * @param {temp_orderdetailsDeleteManyArgs} args - Arguments to filter Temp_orderdetails to delete.
     * @example
     * // Delete a few Temp_orderdetails
     * const { count } = await prisma.temp_orderdetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends temp_orderdetailsDeleteManyArgs>(
      args?: SelectSubset<T, temp_orderdetailsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Temp_orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temp_orderdetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends temp_orderdetailsUpdateManyArgs>(
      args: SelectSubset<T, temp_orderdetailsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Temp_orderdetails.
     * @param {temp_orderdetailsUpsertArgs} args - Arguments to update or create a Temp_orderdetails.
     * @example
     * // Update or create a Temp_orderdetails
     * const temp_orderdetails = await prisma.temp_orderdetails.upsert({
     *   create: {
     *     // ... data to create a Temp_orderdetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Temp_orderdetails we want to update
     *   }
     * })
    **/
    upsert<T extends temp_orderdetailsUpsertArgs>(
      args: SelectSubset<T, temp_orderdetailsUpsertArgs>
    ): Prisma__temp_orderdetailsClient<temp_orderdetailsGetPayload<T>>

    /**
     * Count the number of Temp_orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temp_orderdetailsCountArgs} args - Arguments to filter Temp_orderdetails to count.
     * @example
     * // Count the number of Temp_orderdetails
     * const count = await prisma.temp_orderdetails.count({
     *   where: {
     *     // ... the filter for the Temp_orderdetails we want to count
     *   }
     * })
    **/
    count<T extends temp_orderdetailsCountArgs>(
      args?: Subset<T, temp_orderdetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Temp_orderdetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Temp_orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Temp_orderdetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Temp_orderdetailsAggregateArgs>(args: Subset<T, Temp_orderdetailsAggregateArgs>): Prisma.PrismaPromise<GetTemp_orderdetailsAggregateType<T>>

    /**
     * Group by Temp_orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Temp_orderdetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Temp_orderdetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Temp_orderdetailsGroupByArgs['orderBy'] }
        : { orderBy?: Temp_orderdetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Temp_orderdetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemp_orderdetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for temp_orderdetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__temp_orderdetailsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * temp_orderdetails base type for findUnique actions
   */
  export type temp_orderdetailsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * Filter, which temp_orderdetails to fetch.
     */
    where: temp_orderdetailsWhereUniqueInput
  }

  /**
   * temp_orderdetails findUnique
   */
  export interface temp_orderdetailsFindUniqueArgs extends temp_orderdetailsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * temp_orderdetails findUniqueOrThrow
   */
  export type temp_orderdetailsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * Filter, which temp_orderdetails to fetch.
     */
    where: temp_orderdetailsWhereUniqueInput
  }


  /**
   * temp_orderdetails base type for findFirst actions
   */
  export type temp_orderdetailsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * Filter, which temp_orderdetails to fetch.
     */
    where?: temp_orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temp_orderdetails to fetch.
     */
    orderBy?: Enumerable<temp_orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for temp_orderdetails.
     */
    cursor?: temp_orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temp_orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temp_orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of temp_orderdetails.
     */
    distinct?: Enumerable<Temp_orderdetailsScalarFieldEnum>
  }

  /**
   * temp_orderdetails findFirst
   */
  export interface temp_orderdetailsFindFirstArgs extends temp_orderdetailsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * temp_orderdetails findFirstOrThrow
   */
  export type temp_orderdetailsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * Filter, which temp_orderdetails to fetch.
     */
    where?: temp_orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temp_orderdetails to fetch.
     */
    orderBy?: Enumerable<temp_orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for temp_orderdetails.
     */
    cursor?: temp_orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temp_orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temp_orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of temp_orderdetails.
     */
    distinct?: Enumerable<Temp_orderdetailsScalarFieldEnum>
  }


  /**
   * temp_orderdetails findMany
   */
  export type temp_orderdetailsFindManyArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * Filter, which temp_orderdetails to fetch.
     */
    where?: temp_orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temp_orderdetails to fetch.
     */
    orderBy?: Enumerable<temp_orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing temp_orderdetails.
     */
    cursor?: temp_orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temp_orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temp_orderdetails.
     */
    skip?: number
    distinct?: Enumerable<Temp_orderdetailsScalarFieldEnum>
  }


  /**
   * temp_orderdetails create
   */
  export type temp_orderdetailsCreateArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * The data needed to create a temp_orderdetails.
     */
    data: XOR<temp_orderdetailsCreateInput, temp_orderdetailsUncheckedCreateInput>
  }


  /**
   * temp_orderdetails createMany
   */
  export type temp_orderdetailsCreateManyArgs = {
    /**
     * The data used to create many temp_orderdetails.
     */
    data: Enumerable<temp_orderdetailsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * temp_orderdetails update
   */
  export type temp_orderdetailsUpdateArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * The data needed to update a temp_orderdetails.
     */
    data: XOR<temp_orderdetailsUpdateInput, temp_orderdetailsUncheckedUpdateInput>
    /**
     * Choose, which temp_orderdetails to update.
     */
    where: temp_orderdetailsWhereUniqueInput
  }


  /**
   * temp_orderdetails updateMany
   */
  export type temp_orderdetailsUpdateManyArgs = {
    /**
     * The data used to update temp_orderdetails.
     */
    data: XOR<temp_orderdetailsUpdateManyMutationInput, temp_orderdetailsUncheckedUpdateManyInput>
    /**
     * Filter which temp_orderdetails to update
     */
    where?: temp_orderdetailsWhereInput
  }


  /**
   * temp_orderdetails upsert
   */
  export type temp_orderdetailsUpsertArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * The filter to search for the temp_orderdetails to update in case it exists.
     */
    where: temp_orderdetailsWhereUniqueInput
    /**
     * In case the temp_orderdetails found by the `where` argument doesn't exist, create a new temp_orderdetails with this data.
     */
    create: XOR<temp_orderdetailsCreateInput, temp_orderdetailsUncheckedCreateInput>
    /**
     * In case the temp_orderdetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<temp_orderdetailsUpdateInput, temp_orderdetailsUncheckedUpdateInput>
  }


  /**
   * temp_orderdetails delete
   */
  export type temp_orderdetailsDeleteArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
    /**
     * Filter which temp_orderdetails to delete.
     */
    where: temp_orderdetailsWhereUniqueInput
  }


  /**
   * temp_orderdetails deleteMany
   */
  export type temp_orderdetailsDeleteManyArgs = {
    /**
     * Filter which temp_orderdetails to delete
     */
    where?: temp_orderdetailsWhereInput
  }


  /**
   * temp_orderdetails without action
   */
  export type temp_orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the temp_orderdetails
     */
    select?: temp_orderdetailsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CustomersScalarFieldEnum: {
    customerNumber: 'customerNumber',
    customerName: 'customerName',
    contactLastName: 'contactLastName',
    contactFirstName: 'contactFirstName',
    phone: 'phone',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    state: 'state',
    postalCode: 'postalCode',
    country: 'country',
    salesRepEmployeeNumber: 'salesRepEmployeeNumber',
    creditLimit: 'creditLimit'
  };

  export type CustomersScalarFieldEnum = (typeof CustomersScalarFieldEnum)[keyof typeof CustomersScalarFieldEnum]


  export const EmployeesScalarFieldEnum: {
    employeeNumber: 'employeeNumber',
    lastName: 'lastName',
    firstName: 'firstName',
    extension: 'extension',
    email: 'email',
    officeCode: 'officeCode',
    reportsTo: 'reportsTo',
    jobTitle: 'jobTitle'
  };

  export type EmployeesScalarFieldEnum = (typeof EmployeesScalarFieldEnum)[keyof typeof EmployeesScalarFieldEnum]


  export const OfficesScalarFieldEnum: {
    officeCode: 'officeCode',
    city: 'city',
    phone: 'phone',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    state: 'state',
    country: 'country',
    postalCode: 'postalCode',
    territory: 'territory'
  };

  export type OfficesScalarFieldEnum = (typeof OfficesScalarFieldEnum)[keyof typeof OfficesScalarFieldEnum]


  export const OrderdetailsScalarFieldEnum: {
    orderNumber: 'orderNumber',
    productCode: 'productCode',
    quantityOrdered: 'quantityOrdered',
    priceEach: 'priceEach',
    orderLineNumber: 'orderLineNumber'
  };

  export type OrderdetailsScalarFieldEnum = (typeof OrderdetailsScalarFieldEnum)[keyof typeof OrderdetailsScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    orderNumber: 'orderNumber',
    orderDate: 'orderDate',
    requiredDate: 'requiredDate',
    shippedDate: 'shippedDate',
    status: 'status',
    comments: 'comments',
    customerNumber: 'customerNumber'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const PaymentsScalarFieldEnum: {
    customerNumber: 'customerNumber',
    checkNumber: 'checkNumber',
    paymentDate: 'paymentDate',
    amount: 'amount'
  };

  export type PaymentsScalarFieldEnum = (typeof PaymentsScalarFieldEnum)[keyof typeof PaymentsScalarFieldEnum]


  export const ProductlinesScalarFieldEnum: {
    productLine: 'productLine',
    textDescription: 'textDescription',
    htmlDescription: 'htmlDescription',
    image: 'image'
  };

  export type ProductlinesScalarFieldEnum = (typeof ProductlinesScalarFieldEnum)[keyof typeof ProductlinesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    productCode: 'productCode',
    productName: 'productName',
    productLine: 'productLine',
    productScale: 'productScale',
    productVendor: 'productVendor',
    productDescription: 'productDescription',
    quantityInStock: 'quantityInStock',
    buyPrice: 'buyPrice',
    MSRP: 'MSRP'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const Temp_orderdetailsScalarFieldEnum: {
    orderLineNumber: 'orderLineNumber',
    orderNumber: 'orderNumber',
    priceEach: 'priceEach',
    productCode: 'productCode',
    quantityOrdered: 'quantityOrdered'
  };

  export type Temp_orderdetailsScalarFieldEnum = (typeof Temp_orderdetailsScalarFieldEnum)[keyof typeof Temp_orderdetailsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type customersWhereInput = {
    AND?: Enumerable<customersWhereInput>
    OR?: Enumerable<customersWhereInput>
    NOT?: Enumerable<customersWhereInput>
    customerNumber?: IntFilter | number
    customerName?: StringFilter | string
    contactLastName?: StringFilter | string
    contactFirstName?: StringFilter | string
    phone?: StringFilter | string
    addressLine1?: StringFilter | string
    addressLine2?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringNullableFilter | string | null
    postalCode?: StringNullableFilter | string | null
    country?: StringFilter | string
    salesRepEmployeeNumber?: IntNullableFilter | number | null
    creditLimit?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    employees?: XOR<EmployeesRelationFilter, employeesWhereInput> | null
    orders?: OrdersListRelationFilter
    payments?: PaymentsListRelationFilter
  }

  export type customersOrderByWithRelationInput = {
    customerNumber?: SortOrder
    customerName?: SortOrder
    contactLastName?: SortOrder
    contactFirstName?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    salesRepEmployeeNumber?: SortOrder
    creditLimit?: SortOrder
    employees?: employeesOrderByWithRelationInput
    orders?: ordersOrderByRelationAggregateInput
    payments?: paymentsOrderByRelationAggregateInput
  }

  export type customersWhereUniqueInput = {
    customerNumber?: number
  }

  export type customersOrderByWithAggregationInput = {
    customerNumber?: SortOrder
    customerName?: SortOrder
    contactLastName?: SortOrder
    contactFirstName?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    salesRepEmployeeNumber?: SortOrder
    creditLimit?: SortOrder
    _count?: customersCountOrderByAggregateInput
    _avg?: customersAvgOrderByAggregateInput
    _max?: customersMaxOrderByAggregateInput
    _min?: customersMinOrderByAggregateInput
    _sum?: customersSumOrderByAggregateInput
  }

  export type customersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customersScalarWhereWithAggregatesInput>
    OR?: Enumerable<customersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customersScalarWhereWithAggregatesInput>
    customerNumber?: IntWithAggregatesFilter | number
    customerName?: StringWithAggregatesFilter | string
    contactLastName?: StringWithAggregatesFilter | string
    contactFirstName?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    addressLine1?: StringWithAggregatesFilter | string
    addressLine2?: StringNullableWithAggregatesFilter | string | null
    city?: StringWithAggregatesFilter | string
    state?: StringNullableWithAggregatesFilter | string | null
    postalCode?: StringNullableWithAggregatesFilter | string | null
    country?: StringWithAggregatesFilter | string
    salesRepEmployeeNumber?: IntNullableWithAggregatesFilter | number | null
    creditLimit?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type employeesWhereInput = {
    AND?: Enumerable<employeesWhereInput>
    OR?: Enumerable<employeesWhereInput>
    NOT?: Enumerable<employeesWhereInput>
    employeeNumber?: IntFilter | number
    lastName?: StringFilter | string
    firstName?: StringFilter | string
    extension?: StringFilter | string
    email?: StringFilter | string
    officeCode?: StringFilter | string
    reportsTo?: IntNullableFilter | number | null
    jobTitle?: StringFilter | string
    customers?: CustomersListRelationFilter
    employees?: XOR<EmployeesRelationFilter, employeesWhereInput> | null
    other_employees?: EmployeesListRelationFilter
    offices?: XOR<OfficesRelationFilter, officesWhereInput>
  }

  export type employeesOrderByWithRelationInput = {
    employeeNumber?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    extension?: SortOrder
    email?: SortOrder
    officeCode?: SortOrder
    reportsTo?: SortOrder
    jobTitle?: SortOrder
    customers?: customersOrderByRelationAggregateInput
    employees?: employeesOrderByWithRelationInput
    other_employees?: employeesOrderByRelationAggregateInput
    offices?: officesOrderByWithRelationInput
  }

  export type employeesWhereUniqueInput = {
    employeeNumber?: number
  }

  export type employeesOrderByWithAggregationInput = {
    employeeNumber?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    extension?: SortOrder
    email?: SortOrder
    officeCode?: SortOrder
    reportsTo?: SortOrder
    jobTitle?: SortOrder
    _count?: employeesCountOrderByAggregateInput
    _avg?: employeesAvgOrderByAggregateInput
    _max?: employeesMaxOrderByAggregateInput
    _min?: employeesMinOrderByAggregateInput
    _sum?: employeesSumOrderByAggregateInput
  }

  export type employeesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<employeesScalarWhereWithAggregatesInput>
    OR?: Enumerable<employeesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<employeesScalarWhereWithAggregatesInput>
    employeeNumber?: IntWithAggregatesFilter | number
    lastName?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    extension?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    officeCode?: StringWithAggregatesFilter | string
    reportsTo?: IntNullableWithAggregatesFilter | number | null
    jobTitle?: StringWithAggregatesFilter | string
  }

  export type officesWhereInput = {
    AND?: Enumerable<officesWhereInput>
    OR?: Enumerable<officesWhereInput>
    NOT?: Enumerable<officesWhereInput>
    officeCode?: StringFilter | string
    city?: StringFilter | string
    phone?: StringFilter | string
    addressLine1?: StringFilter | string
    addressLine2?: StringNullableFilter | string | null
    state?: StringNullableFilter | string | null
    country?: StringFilter | string
    postalCode?: StringFilter | string
    territory?: StringFilter | string
    employees?: EmployeesListRelationFilter
  }

  export type officesOrderByWithRelationInput = {
    officeCode?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    state?: SortOrder
    country?: SortOrder
    postalCode?: SortOrder
    territory?: SortOrder
    employees?: employeesOrderByRelationAggregateInput
  }

  export type officesWhereUniqueInput = {
    officeCode?: string
  }

  export type officesOrderByWithAggregationInput = {
    officeCode?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    state?: SortOrder
    country?: SortOrder
    postalCode?: SortOrder
    territory?: SortOrder
    _count?: officesCountOrderByAggregateInput
    _max?: officesMaxOrderByAggregateInput
    _min?: officesMinOrderByAggregateInput
  }

  export type officesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<officesScalarWhereWithAggregatesInput>
    OR?: Enumerable<officesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<officesScalarWhereWithAggregatesInput>
    officeCode?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    addressLine1?: StringWithAggregatesFilter | string
    addressLine2?: StringNullableWithAggregatesFilter | string | null
    state?: StringNullableWithAggregatesFilter | string | null
    country?: StringWithAggregatesFilter | string
    postalCode?: StringWithAggregatesFilter | string
    territory?: StringWithAggregatesFilter | string
  }

  export type orderdetailsWhereInput = {
    AND?: Enumerable<orderdetailsWhereInput>
    OR?: Enumerable<orderdetailsWhereInput>
    NOT?: Enumerable<orderdetailsWhereInput>
    orderNumber?: IntFilter | number
    productCode?: StringFilter | string
    quantityOrdered?: IntFilter | number
    priceEach?: DecimalFilter | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFilter | number
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type orderdetailsOrderByWithRelationInput = {
    orderNumber?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
    priceEach?: SortOrder
    orderLineNumber?: SortOrder
    orders?: ordersOrderByWithRelationInput
    products?: productsOrderByWithRelationInput
  }

  export type orderdetailsWhereUniqueInput = {
    orderNumber_productCode?: orderdetailsOrderNumberProductCodeCompoundUniqueInput
  }

  export type orderdetailsOrderByWithAggregationInput = {
    orderNumber?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
    priceEach?: SortOrder
    orderLineNumber?: SortOrder
    _count?: orderdetailsCountOrderByAggregateInput
    _avg?: orderdetailsAvgOrderByAggregateInput
    _max?: orderdetailsMaxOrderByAggregateInput
    _min?: orderdetailsMinOrderByAggregateInput
    _sum?: orderdetailsSumOrderByAggregateInput
  }

  export type orderdetailsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<orderdetailsScalarWhereWithAggregatesInput>
    OR?: Enumerable<orderdetailsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<orderdetailsScalarWhereWithAggregatesInput>
    orderNumber?: IntWithAggregatesFilter | number
    productCode?: StringWithAggregatesFilter | string
    quantityOrdered?: IntWithAggregatesFilter | number
    priceEach?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntWithAggregatesFilter | number
  }

  export type ordersWhereInput = {
    AND?: Enumerable<ordersWhereInput>
    OR?: Enumerable<ordersWhereInput>
    NOT?: Enumerable<ordersWhereInput>
    orderNumber?: IntFilter | number
    orderDate?: DateTimeFilter | Date | string
    requiredDate?: DateTimeFilter | Date | string
    shippedDate?: DateTimeNullableFilter | Date | string | null
    status?: StringFilter | string
    comments?: StringNullableFilter | string | null
    customerNumber?: IntFilter | number
    orderdetails?: OrderdetailsListRelationFilter
    customers?: XOR<CustomersRelationFilter, customersWhereInput>
  }

  export type ordersOrderByWithRelationInput = {
    orderNumber?: SortOrder
    orderDate?: SortOrder
    requiredDate?: SortOrder
    shippedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    customerNumber?: SortOrder
    orderdetails?: orderdetailsOrderByRelationAggregateInput
    customers?: customersOrderByWithRelationInput
  }

  export type ordersWhereUniqueInput = {
    orderNumber?: number
  }

  export type ordersOrderByWithAggregationInput = {
    orderNumber?: SortOrder
    orderDate?: SortOrder
    requiredDate?: SortOrder
    shippedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    customerNumber?: SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ordersScalarWhereWithAggregatesInput>
    OR?: Enumerable<ordersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ordersScalarWhereWithAggregatesInput>
    orderNumber?: IntWithAggregatesFilter | number
    orderDate?: DateTimeWithAggregatesFilter | Date | string
    requiredDate?: DateTimeWithAggregatesFilter | Date | string
    shippedDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    status?: StringWithAggregatesFilter | string
    comments?: StringNullableWithAggregatesFilter | string | null
    customerNumber?: IntWithAggregatesFilter | number
  }

  export type paymentsWhereInput = {
    AND?: Enumerable<paymentsWhereInput>
    OR?: Enumerable<paymentsWhereInput>
    NOT?: Enumerable<paymentsWhereInput>
    customerNumber?: IntFilter | number
    checkNumber?: StringFilter | string
    paymentDate?: DateTimeFilter | Date | string
    amount?: DecimalFilter | Decimal | DecimalJsLike | number | string
    customers?: XOR<CustomersRelationFilter, customersWhereInput>
  }

  export type paymentsOrderByWithRelationInput = {
    customerNumber?: SortOrder
    checkNumber?: SortOrder
    paymentDate?: SortOrder
    amount?: SortOrder
    customers?: customersOrderByWithRelationInput
  }

  export type paymentsWhereUniqueInput = {
    customerNumber_checkNumber?: paymentsCustomerNumberCheckNumberCompoundUniqueInput
  }

  export type paymentsOrderByWithAggregationInput = {
    customerNumber?: SortOrder
    checkNumber?: SortOrder
    paymentDate?: SortOrder
    amount?: SortOrder
    _count?: paymentsCountOrderByAggregateInput
    _avg?: paymentsAvgOrderByAggregateInput
    _max?: paymentsMaxOrderByAggregateInput
    _min?: paymentsMinOrderByAggregateInput
    _sum?: paymentsSumOrderByAggregateInput
  }

  export type paymentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<paymentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<paymentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<paymentsScalarWhereWithAggregatesInput>
    customerNumber?: IntWithAggregatesFilter | number
    checkNumber?: StringWithAggregatesFilter | string
    paymentDate?: DateTimeWithAggregatesFilter | Date | string
    amount?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type productlinesWhereInput = {
    AND?: Enumerable<productlinesWhereInput>
    OR?: Enumerable<productlinesWhereInput>
    NOT?: Enumerable<productlinesWhereInput>
    productLine?: StringFilter | string
    textDescription?: StringNullableFilter | string | null
    htmlDescription?: StringNullableFilter | string | null
    image?: BytesNullableFilter | Buffer | null
    products?: ProductsListRelationFilter
  }

  export type productlinesOrderByWithRelationInput = {
    productLine?: SortOrder
    textDescription?: SortOrder
    htmlDescription?: SortOrder
    image?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type productlinesWhereUniqueInput = {
    productLine?: string
  }

  export type productlinesOrderByWithAggregationInput = {
    productLine?: SortOrder
    textDescription?: SortOrder
    htmlDescription?: SortOrder
    image?: SortOrder
    _count?: productlinesCountOrderByAggregateInput
    _max?: productlinesMaxOrderByAggregateInput
    _min?: productlinesMinOrderByAggregateInput
  }

  export type productlinesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productlinesScalarWhereWithAggregatesInput>
    OR?: Enumerable<productlinesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productlinesScalarWhereWithAggregatesInput>
    productLine?: StringWithAggregatesFilter | string
    textDescription?: StringNullableWithAggregatesFilter | string | null
    htmlDescription?: StringNullableWithAggregatesFilter | string | null
    image?: BytesNullableWithAggregatesFilter | Buffer | null
  }

  export type productsWhereInput = {
    AND?: Enumerable<productsWhereInput>
    OR?: Enumerable<productsWhereInput>
    NOT?: Enumerable<productsWhereInput>
    productCode?: StringFilter | string
    productName?: StringFilter | string
    productLine?: StringFilter | string
    productScale?: StringFilter | string
    productVendor?: StringFilter | string
    productDescription?: StringFilter | string
    quantityInStock?: IntFilter | number
    buyPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFilter | Decimal | DecimalJsLike | number | string
    orderdetails?: OrderdetailsListRelationFilter
    productlines?: XOR<ProductlinesRelationFilter, productlinesWhereInput>
  }

  export type productsOrderByWithRelationInput = {
    productCode?: SortOrder
    productName?: SortOrder
    productLine?: SortOrder
    productScale?: SortOrder
    productVendor?: SortOrder
    productDescription?: SortOrder
    quantityInStock?: SortOrder
    buyPrice?: SortOrder
    MSRP?: SortOrder
    orderdetails?: orderdetailsOrderByRelationAggregateInput
    productlines?: productlinesOrderByWithRelationInput
  }

  export type productsWhereUniqueInput = {
    productCode?: string
  }

  export type productsOrderByWithAggregationInput = {
    productCode?: SortOrder
    productName?: SortOrder
    productLine?: SortOrder
    productScale?: SortOrder
    productVendor?: SortOrder
    productDescription?: SortOrder
    quantityInStock?: SortOrder
    buyPrice?: SortOrder
    MSRP?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productsScalarWhereWithAggregatesInput>
    OR?: Enumerable<productsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productsScalarWhereWithAggregatesInput>
    productCode?: StringWithAggregatesFilter | string
    productName?: StringWithAggregatesFilter | string
    productLine?: StringWithAggregatesFilter | string
    productScale?: StringWithAggregatesFilter | string
    productVendor?: StringWithAggregatesFilter | string
    productDescription?: StringWithAggregatesFilter | string
    quantityInStock?: IntWithAggregatesFilter | number
    buyPrice?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type temp_orderdetailsWhereInput = {
    AND?: Enumerable<temp_orderdetailsWhereInput>
    OR?: Enumerable<temp_orderdetailsWhereInput>
    NOT?: Enumerable<temp_orderdetailsWhereInput>
    orderLineNumber?: IntNullableFilter | number | null
    orderNumber?: IntFilter | number
    priceEach?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    productCode?: StringFilter | string
    quantityOrdered?: IntNullableFilter | number | null
  }

  export type temp_orderdetailsOrderByWithRelationInput = {
    orderLineNumber?: SortOrder
    orderNumber?: SortOrder
    priceEach?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
  }

  export type temp_orderdetailsWhereUniqueInput = {
    orderNumber_productCode?: temp_orderdetailsOrderNumberProductCodeCompoundUniqueInput
  }

  export type temp_orderdetailsOrderByWithAggregationInput = {
    orderLineNumber?: SortOrder
    orderNumber?: SortOrder
    priceEach?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
    _count?: temp_orderdetailsCountOrderByAggregateInput
    _avg?: temp_orderdetailsAvgOrderByAggregateInput
    _max?: temp_orderdetailsMaxOrderByAggregateInput
    _min?: temp_orderdetailsMinOrderByAggregateInput
    _sum?: temp_orderdetailsSumOrderByAggregateInput
  }

  export type temp_orderdetailsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<temp_orderdetailsScalarWhereWithAggregatesInput>
    OR?: Enumerable<temp_orderdetailsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<temp_orderdetailsScalarWhereWithAggregatesInput>
    orderLineNumber?: IntNullableWithAggregatesFilter | number | null
    orderNumber?: IntWithAggregatesFilter | number
    priceEach?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    productCode?: StringWithAggregatesFilter | string
    quantityOrdered?: IntNullableWithAggregatesFilter | number | null
  }

  export type customersCreateInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    employees?: employeesCreateNestedOneWithoutCustomersInput
    orders?: ordersCreateNestedManyWithoutCustomersInput
    payments?: paymentsCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    salesRepEmployeeNumber?: number | null
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutCustomersInput
    payments?: paymentsUncheckedCreateNestedManyWithoutCustomersInput
  }

  export type customersUpdateInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    employees?: employeesUpdateOneWithoutCustomersNestedInput
    orders?: ordersUpdateManyWithoutCustomersNestedInput
    payments?: paymentsUpdateManyWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    salesRepEmployeeNumber?: NullableIntFieldUpdateOperationsInput | number | null
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedUpdateManyWithoutCustomersNestedInput
    payments?: paymentsUncheckedUpdateManyWithoutCustomersNestedInput
  }

  export type customersCreateManyInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    salesRepEmployeeNumber?: number | null
    creditLimit?: Decimal | DecimalJsLike | number | string | null
  }

  export type customersUpdateManyMutationInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type customersUncheckedUpdateManyInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    salesRepEmployeeNumber?: NullableIntFieldUpdateOperationsInput | number | null
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type employeesCreateInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    jobTitle: string
    customers?: customersCreateNestedManyWithoutEmployeesInput
    employees?: employeesCreateNestedOneWithoutOther_employeesInput
    other_employees?: employeesCreateNestedManyWithoutEmployeesInput
    offices: officesCreateNestedOneWithoutEmployeesInput
  }

  export type employeesUncheckedCreateInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    officeCode: string
    reportsTo?: number | null
    jobTitle: string
    customers?: customersUncheckedCreateNestedManyWithoutEmployeesInput
    other_employees?: employeesUncheckedCreateNestedManyWithoutEmployeesInput
  }

  export type employeesUpdateInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUpdateManyWithoutEmployeesNestedInput
    employees?: employeesUpdateOneWithoutOther_employeesNestedInput
    other_employees?: employeesUpdateManyWithoutEmployeesNestedInput
    offices?: officesUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type employeesUncheckedUpdateInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    officeCode?: StringFieldUpdateOperationsInput | string
    reportsTo?: NullableIntFieldUpdateOperationsInput | number | null
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUncheckedUpdateManyWithoutEmployeesNestedInput
    other_employees?: employeesUncheckedUpdateManyWithoutEmployeesNestedInput
  }

  export type employeesCreateManyInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    officeCode: string
    reportsTo?: number | null
    jobTitle: string
  }

  export type employeesUpdateManyMutationInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type employeesUncheckedUpdateManyInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    officeCode?: StringFieldUpdateOperationsInput | string
    reportsTo?: NullableIntFieldUpdateOperationsInput | number | null
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type officesCreateInput = {
    officeCode: string
    city: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    state?: string | null
    country: string
    postalCode: string
    territory: string
    employees?: employeesCreateNestedManyWithoutOfficesInput
  }

  export type officesUncheckedCreateInput = {
    officeCode: string
    city: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    state?: string | null
    country: string
    postalCode: string
    territory: string
    employees?: employeesUncheckedCreateNestedManyWithoutOfficesInput
  }

  export type officesUpdateInput = {
    officeCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    territory?: StringFieldUpdateOperationsInput | string
    employees?: employeesUpdateManyWithoutOfficesNestedInput
  }

  export type officesUncheckedUpdateInput = {
    officeCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    territory?: StringFieldUpdateOperationsInput | string
    employees?: employeesUncheckedUpdateManyWithoutOfficesNestedInput
  }

  export type officesCreateManyInput = {
    officeCode: string
    city: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    state?: string | null
    country: string
    postalCode: string
    territory: string
  }

  export type officesUpdateManyMutationInput = {
    officeCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    territory?: StringFieldUpdateOperationsInput | string
  }

  export type officesUncheckedUpdateManyInput = {
    officeCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    territory?: StringFieldUpdateOperationsInput | string
  }

  export type orderdetailsCreateInput = {
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
    orders: ordersCreateNestedOneWithoutOrderdetailsInput
    products: productsCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailsUncheckedCreateInput = {
    orderNumber: number
    productCode: string
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
  }

  export type orderdetailsUpdateInput = {
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
    orders?: ordersUpdateOneRequiredWithoutOrderdetailsNestedInput
    products?: productsUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailsUncheckedUpdateInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
  }

  export type orderdetailsCreateManyInput = {
    orderNumber: number
    productCode: string
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
  }

  export type orderdetailsUpdateManyMutationInput = {
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
  }

  export type orderdetailsUncheckedUpdateManyInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
  }

  export type ordersCreateInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
    orderdetails?: orderdetailsCreateNestedManyWithoutOrdersInput
    customers: customersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
    customerNumber: number
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    orderdetails?: orderdetailsUpdateManyWithoutOrdersNestedInput
    customers?: customersUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    customerNumber?: IntFieldUpdateOperationsInput | number
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
    customerNumber: number
  }

  export type ordersUpdateManyMutationInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ordersUncheckedUpdateManyInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    customerNumber?: IntFieldUpdateOperationsInput | number
  }

  export type paymentsCreateInput = {
    checkNumber: string
    paymentDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    customers: customersCreateNestedOneWithoutPaymentsInput
  }

  export type paymentsUncheckedCreateInput = {
    customerNumber: number
    checkNumber: string
    paymentDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
  }

  export type paymentsUpdateInput = {
    checkNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    customers?: customersUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type paymentsUncheckedUpdateInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    checkNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type paymentsCreateManyInput = {
    customerNumber: number
    checkNumber: string
    paymentDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
  }

  export type paymentsUpdateManyMutationInput = {
    checkNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type paymentsUncheckedUpdateManyInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    checkNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type productlinesCreateInput = {
    productLine: string
    textDescription?: string | null
    htmlDescription?: string | null
    image?: Buffer | null
    products?: productsCreateNestedManyWithoutProductlinesInput
  }

  export type productlinesUncheckedCreateInput = {
    productLine: string
    textDescription?: string | null
    htmlDescription?: string | null
    image?: Buffer | null
    products?: productsUncheckedCreateNestedManyWithoutProductlinesInput
  }

  export type productlinesUpdateInput = {
    productLine?: StringFieldUpdateOperationsInput | string
    textDescription?: NullableStringFieldUpdateOperationsInput | string | null
    htmlDescription?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    products?: productsUpdateManyWithoutProductlinesNestedInput
  }

  export type productlinesUncheckedUpdateInput = {
    productLine?: StringFieldUpdateOperationsInput | string
    textDescription?: NullableStringFieldUpdateOperationsInput | string | null
    htmlDescription?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    products?: productsUncheckedUpdateManyWithoutProductlinesNestedInput
  }

  export type productlinesCreateManyInput = {
    productLine: string
    textDescription?: string | null
    htmlDescription?: string | null
    image?: Buffer | null
  }

  export type productlinesUpdateManyMutationInput = {
    productLine?: StringFieldUpdateOperationsInput | string
    textDescription?: NullableStringFieldUpdateOperationsInput | string | null
    htmlDescription?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type productlinesUncheckedUpdateManyInput = {
    productLine?: StringFieldUpdateOperationsInput | string
    textDescription?: NullableStringFieldUpdateOperationsInput | string | null
    htmlDescription?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type productsCreateInput = {
    productCode: string
    productName: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsCreateNestedManyWithoutProductsInput
    productlines: productlinesCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    productCode: string
    productName: string
    productLine: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsUpdateInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsUpdateManyWithoutProductsNestedInput
    productlines?: productlinesUpdateOneRequiredWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productLine?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsCreateManyInput = {
    productCode: string
    productName: string
    productLine: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
  }

  export type productsUpdateManyMutationInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type productsUncheckedUpdateManyInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productLine?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type temp_orderdetailsCreateInput = {
    orderLineNumber?: number | null
    orderNumber: number
    priceEach?: Decimal | DecimalJsLike | number | string | null
    productCode: string
    quantityOrdered?: number | null
  }

  export type temp_orderdetailsUncheckedCreateInput = {
    orderLineNumber?: number | null
    orderNumber: number
    priceEach?: Decimal | DecimalJsLike | number | string | null
    productCode: string
    quantityOrdered?: number | null
  }

  export type temp_orderdetailsUpdateInput = {
    orderLineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    orderNumber?: IntFieldUpdateOperationsInput | number
    priceEach?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type temp_orderdetailsUncheckedUpdateInput = {
    orderLineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    orderNumber?: IntFieldUpdateOperationsInput | number
    priceEach?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type temp_orderdetailsCreateManyInput = {
    orderLineNumber?: number | null
    orderNumber: number
    priceEach?: Decimal | DecimalJsLike | number | string | null
    productCode: string
    quantityOrdered?: number | null
  }

  export type temp_orderdetailsUpdateManyMutationInput = {
    orderLineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    orderNumber?: IntFieldUpdateOperationsInput | number
    priceEach?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type temp_orderdetailsUncheckedUpdateManyInput = {
    orderLineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    orderNumber?: IntFieldUpdateOperationsInput | number
    priceEach?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type EmployeesRelationFilter = {
    is?: employeesWhereInput | null
    isNot?: employeesWhereInput | null
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type PaymentsListRelationFilter = {
    every?: paymentsWhereInput
    some?: paymentsWhereInput
    none?: paymentsWhereInput
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type customersCountOrderByAggregateInput = {
    customerNumber?: SortOrder
    customerName?: SortOrder
    contactLastName?: SortOrder
    contactFirstName?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    salesRepEmployeeNumber?: SortOrder
    creditLimit?: SortOrder
  }

  export type customersAvgOrderByAggregateInput = {
    customerNumber?: SortOrder
    salesRepEmployeeNumber?: SortOrder
    creditLimit?: SortOrder
  }

  export type customersMaxOrderByAggregateInput = {
    customerNumber?: SortOrder
    customerName?: SortOrder
    contactLastName?: SortOrder
    contactFirstName?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    salesRepEmployeeNumber?: SortOrder
    creditLimit?: SortOrder
  }

  export type customersMinOrderByAggregateInput = {
    customerNumber?: SortOrder
    customerName?: SortOrder
    contactLastName?: SortOrder
    contactFirstName?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    salesRepEmployeeNumber?: SortOrder
    creditLimit?: SortOrder
  }

  export type customersSumOrderByAggregateInput = {
    customerNumber?: SortOrder
    salesRepEmployeeNumber?: SortOrder
    creditLimit?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type CustomersListRelationFilter = {
    every?: customersWhereInput
    some?: customersWhereInput
    none?: customersWhereInput
  }

  export type EmployeesListRelationFilter = {
    every?: employeesWhereInput
    some?: employeesWhereInput
    none?: employeesWhereInput
  }

  export type OfficesRelationFilter = {
    is?: officesWhereInput
    isNot?: officesWhereInput
  }

  export type customersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type employeesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type employeesCountOrderByAggregateInput = {
    employeeNumber?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    extension?: SortOrder
    email?: SortOrder
    officeCode?: SortOrder
    reportsTo?: SortOrder
    jobTitle?: SortOrder
  }

  export type employeesAvgOrderByAggregateInput = {
    employeeNumber?: SortOrder
    reportsTo?: SortOrder
  }

  export type employeesMaxOrderByAggregateInput = {
    employeeNumber?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    extension?: SortOrder
    email?: SortOrder
    officeCode?: SortOrder
    reportsTo?: SortOrder
    jobTitle?: SortOrder
  }

  export type employeesMinOrderByAggregateInput = {
    employeeNumber?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    extension?: SortOrder
    email?: SortOrder
    officeCode?: SortOrder
    reportsTo?: SortOrder
    jobTitle?: SortOrder
  }

  export type employeesSumOrderByAggregateInput = {
    employeeNumber?: SortOrder
    reportsTo?: SortOrder
  }

  export type officesCountOrderByAggregateInput = {
    officeCode?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    state?: SortOrder
    country?: SortOrder
    postalCode?: SortOrder
    territory?: SortOrder
  }

  export type officesMaxOrderByAggregateInput = {
    officeCode?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    state?: SortOrder
    country?: SortOrder
    postalCode?: SortOrder
    territory?: SortOrder
  }

  export type officesMinOrderByAggregateInput = {
    officeCode?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    state?: SortOrder
    country?: SortOrder
    postalCode?: SortOrder
    territory?: SortOrder
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type OrdersRelationFilter = {
    is?: ordersWhereInput
    isNot?: ordersWhereInput
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type orderdetailsOrderNumberProductCodeCompoundUniqueInput = {
    orderNumber: number
    productCode: string
  }

  export type orderdetailsCountOrderByAggregateInput = {
    orderNumber?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
    priceEach?: SortOrder
    orderLineNumber?: SortOrder
  }

  export type orderdetailsAvgOrderByAggregateInput = {
    orderNumber?: SortOrder
    quantityOrdered?: SortOrder
    priceEach?: SortOrder
    orderLineNumber?: SortOrder
  }

  export type orderdetailsMaxOrderByAggregateInput = {
    orderNumber?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
    priceEach?: SortOrder
    orderLineNumber?: SortOrder
  }

  export type orderdetailsMinOrderByAggregateInput = {
    orderNumber?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
    priceEach?: SortOrder
    orderLineNumber?: SortOrder
  }

  export type orderdetailsSumOrderByAggregateInput = {
    orderNumber?: SortOrder
    quantityOrdered?: SortOrder
    priceEach?: SortOrder
    orderLineNumber?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type OrderdetailsListRelationFilter = {
    every?: orderdetailsWhereInput
    some?: orderdetailsWhereInput
    none?: orderdetailsWhereInput
  }

  export type CustomersRelationFilter = {
    is?: customersWhereInput
    isNot?: customersWhereInput
  }

  export type orderdetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersCountOrderByAggregateInput = {
    orderNumber?: SortOrder
    orderDate?: SortOrder
    requiredDate?: SortOrder
    shippedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    customerNumber?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    orderNumber?: SortOrder
    customerNumber?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    orderNumber?: SortOrder
    orderDate?: SortOrder
    requiredDate?: SortOrder
    shippedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    customerNumber?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    orderNumber?: SortOrder
    orderDate?: SortOrder
    requiredDate?: SortOrder
    shippedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    customerNumber?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    orderNumber?: SortOrder
    customerNumber?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type paymentsCustomerNumberCheckNumberCompoundUniqueInput = {
    customerNumber: number
    checkNumber: string
  }

  export type paymentsCountOrderByAggregateInput = {
    customerNumber?: SortOrder
    checkNumber?: SortOrder
    paymentDate?: SortOrder
    amount?: SortOrder
  }

  export type paymentsAvgOrderByAggregateInput = {
    customerNumber?: SortOrder
    amount?: SortOrder
  }

  export type paymentsMaxOrderByAggregateInput = {
    customerNumber?: SortOrder
    checkNumber?: SortOrder
    paymentDate?: SortOrder
    amount?: SortOrder
  }

  export type paymentsMinOrderByAggregateInput = {
    customerNumber?: SortOrder
    checkNumber?: SortOrder
    paymentDate?: SortOrder
    amount?: SortOrder
  }

  export type paymentsSumOrderByAggregateInput = {
    customerNumber?: SortOrder
    amount?: SortOrder
  }

  export type BytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | null
    notIn?: Enumerable<Buffer> | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productlinesCountOrderByAggregateInput = {
    productLine?: SortOrder
    textDescription?: SortOrder
    htmlDescription?: SortOrder
    image?: SortOrder
  }

  export type productlinesMaxOrderByAggregateInput = {
    productLine?: SortOrder
    textDescription?: SortOrder
    htmlDescription?: SortOrder
    image?: SortOrder
  }

  export type productlinesMinOrderByAggregateInput = {
    productLine?: SortOrder
    textDescription?: SortOrder
    htmlDescription?: SortOrder
    image?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | null
    notIn?: Enumerable<Buffer> | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
  }

  export type ProductlinesRelationFilter = {
    is?: productlinesWhereInput
    isNot?: productlinesWhereInput
  }

  export type productsCountOrderByAggregateInput = {
    productCode?: SortOrder
    productName?: SortOrder
    productLine?: SortOrder
    productScale?: SortOrder
    productVendor?: SortOrder
    productDescription?: SortOrder
    quantityInStock?: SortOrder
    buyPrice?: SortOrder
    MSRP?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    quantityInStock?: SortOrder
    buyPrice?: SortOrder
    MSRP?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    productCode?: SortOrder
    productName?: SortOrder
    productLine?: SortOrder
    productScale?: SortOrder
    productVendor?: SortOrder
    productDescription?: SortOrder
    quantityInStock?: SortOrder
    buyPrice?: SortOrder
    MSRP?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    productCode?: SortOrder
    productName?: SortOrder
    productLine?: SortOrder
    productScale?: SortOrder
    productVendor?: SortOrder
    productDescription?: SortOrder
    quantityInStock?: SortOrder
    buyPrice?: SortOrder
    MSRP?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    quantityInStock?: SortOrder
    buyPrice?: SortOrder
    MSRP?: SortOrder
  }

  export type temp_orderdetailsOrderNumberProductCodeCompoundUniqueInput = {
    orderNumber: number
    productCode: string
  }

  export type temp_orderdetailsCountOrderByAggregateInput = {
    orderLineNumber?: SortOrder
    orderNumber?: SortOrder
    priceEach?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
  }

  export type temp_orderdetailsAvgOrderByAggregateInput = {
    orderLineNumber?: SortOrder
    orderNumber?: SortOrder
    priceEach?: SortOrder
    quantityOrdered?: SortOrder
  }

  export type temp_orderdetailsMaxOrderByAggregateInput = {
    orderLineNumber?: SortOrder
    orderNumber?: SortOrder
    priceEach?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
  }

  export type temp_orderdetailsMinOrderByAggregateInput = {
    orderLineNumber?: SortOrder
    orderNumber?: SortOrder
    priceEach?: SortOrder
    productCode?: SortOrder
    quantityOrdered?: SortOrder
  }

  export type temp_orderdetailsSumOrderByAggregateInput = {
    orderLineNumber?: SortOrder
    orderNumber?: SortOrder
    priceEach?: SortOrder
    quantityOrdered?: SortOrder
  }

  export type employeesCreateNestedOneWithoutCustomersInput = {
    create?: XOR<employeesCreateWithoutCustomersInput, employeesUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: employeesCreateOrConnectWithoutCustomersInput
    connect?: employeesWhereUniqueInput
  }

  export type ordersCreateNestedManyWithoutCustomersInput = {
    create?: XOR<Enumerable<ordersCreateWithoutCustomersInput>, Enumerable<ordersUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutCustomersInput>
    createMany?: ordersCreateManyCustomersInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type paymentsCreateNestedManyWithoutCustomersInput = {
    create?: XOR<Enumerable<paymentsCreateWithoutCustomersInput>, Enumerable<paymentsUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<paymentsCreateOrConnectWithoutCustomersInput>
    createMany?: paymentsCreateManyCustomersInputEnvelope
    connect?: Enumerable<paymentsWhereUniqueInput>
  }

  export type ordersUncheckedCreateNestedManyWithoutCustomersInput = {
    create?: XOR<Enumerable<ordersCreateWithoutCustomersInput>, Enumerable<ordersUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutCustomersInput>
    createMany?: ordersCreateManyCustomersInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type paymentsUncheckedCreateNestedManyWithoutCustomersInput = {
    create?: XOR<Enumerable<paymentsCreateWithoutCustomersInput>, Enumerable<paymentsUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<paymentsCreateOrConnectWithoutCustomersInput>
    createMany?: paymentsCreateManyCustomersInputEnvelope
    connect?: Enumerable<paymentsWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type employeesUpdateOneWithoutCustomersNestedInput = {
    create?: XOR<employeesCreateWithoutCustomersInput, employeesUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: employeesCreateOrConnectWithoutCustomersInput
    upsert?: employeesUpsertWithoutCustomersInput
    disconnect?: boolean
    delete?: boolean
    connect?: employeesWhereUniqueInput
    update?: XOR<employeesUpdateWithoutCustomersInput, employeesUncheckedUpdateWithoutCustomersInput>
  }

  export type ordersUpdateManyWithoutCustomersNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutCustomersInput>, Enumerable<ordersUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutCustomersInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutCustomersInput>
    createMany?: ordersCreateManyCustomersInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutCustomersInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutCustomersInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type paymentsUpdateManyWithoutCustomersNestedInput = {
    create?: XOR<Enumerable<paymentsCreateWithoutCustomersInput>, Enumerable<paymentsUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<paymentsCreateOrConnectWithoutCustomersInput>
    upsert?: Enumerable<paymentsUpsertWithWhereUniqueWithoutCustomersInput>
    createMany?: paymentsCreateManyCustomersInputEnvelope
    set?: Enumerable<paymentsWhereUniqueInput>
    disconnect?: Enumerable<paymentsWhereUniqueInput>
    delete?: Enumerable<paymentsWhereUniqueInput>
    connect?: Enumerable<paymentsWhereUniqueInput>
    update?: Enumerable<paymentsUpdateWithWhereUniqueWithoutCustomersInput>
    updateMany?: Enumerable<paymentsUpdateManyWithWhereWithoutCustomersInput>
    deleteMany?: Enumerable<paymentsScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ordersUncheckedUpdateManyWithoutCustomersNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutCustomersInput>, Enumerable<ordersUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutCustomersInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutCustomersInput>
    createMany?: ordersCreateManyCustomersInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutCustomersInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutCustomersInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type paymentsUncheckedUpdateManyWithoutCustomersNestedInput = {
    create?: XOR<Enumerable<paymentsCreateWithoutCustomersInput>, Enumerable<paymentsUncheckedCreateWithoutCustomersInput>>
    connectOrCreate?: Enumerable<paymentsCreateOrConnectWithoutCustomersInput>
    upsert?: Enumerable<paymentsUpsertWithWhereUniqueWithoutCustomersInput>
    createMany?: paymentsCreateManyCustomersInputEnvelope
    set?: Enumerable<paymentsWhereUniqueInput>
    disconnect?: Enumerable<paymentsWhereUniqueInput>
    delete?: Enumerable<paymentsWhereUniqueInput>
    connect?: Enumerable<paymentsWhereUniqueInput>
    update?: Enumerable<paymentsUpdateWithWhereUniqueWithoutCustomersInput>
    updateMany?: Enumerable<paymentsUpdateManyWithWhereWithoutCustomersInput>
    deleteMany?: Enumerable<paymentsScalarWhereInput>
  }

  export type customersCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<Enumerable<customersCreateWithoutEmployeesInput>, Enumerable<customersUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutEmployeesInput>
    createMany?: customersCreateManyEmployeesInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type employeesCreateNestedOneWithoutOther_employeesInput = {
    create?: XOR<employeesCreateWithoutOther_employeesInput, employeesUncheckedCreateWithoutOther_employeesInput>
    connectOrCreate?: employeesCreateOrConnectWithoutOther_employeesInput
    connect?: employeesWhereUniqueInput
  }

  export type employeesCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<Enumerable<employeesCreateWithoutEmployeesInput>, Enumerable<employeesUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutEmployeesInput>
    createMany?: employeesCreateManyEmployeesInputEnvelope
    connect?: Enumerable<employeesWhereUniqueInput>
  }

  export type officesCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<officesCreateWithoutEmployeesInput, officesUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: officesCreateOrConnectWithoutEmployeesInput
    connect?: officesWhereUniqueInput
  }

  export type customersUncheckedCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<Enumerable<customersCreateWithoutEmployeesInput>, Enumerable<customersUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutEmployeesInput>
    createMany?: customersCreateManyEmployeesInputEnvelope
    connect?: Enumerable<customersWhereUniqueInput>
  }

  export type employeesUncheckedCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<Enumerable<employeesCreateWithoutEmployeesInput>, Enumerable<employeesUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutEmployeesInput>
    createMany?: employeesCreateManyEmployeesInputEnvelope
    connect?: Enumerable<employeesWhereUniqueInput>
  }

  export type customersUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<Enumerable<customersCreateWithoutEmployeesInput>, Enumerable<customersUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutEmployeesInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutEmployeesInput>
    createMany?: customersCreateManyEmployeesInputEnvelope
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    connect?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutEmployeesInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutEmployeesInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type employeesUpdateOneWithoutOther_employeesNestedInput = {
    create?: XOR<employeesCreateWithoutOther_employeesInput, employeesUncheckedCreateWithoutOther_employeesInput>
    connectOrCreate?: employeesCreateOrConnectWithoutOther_employeesInput
    upsert?: employeesUpsertWithoutOther_employeesInput
    disconnect?: boolean
    delete?: boolean
    connect?: employeesWhereUniqueInput
    update?: XOR<employeesUpdateWithoutOther_employeesInput, employeesUncheckedUpdateWithoutOther_employeesInput>
  }

  export type employeesUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<Enumerable<employeesCreateWithoutEmployeesInput>, Enumerable<employeesUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutEmployeesInput>
    upsert?: Enumerable<employeesUpsertWithWhereUniqueWithoutEmployeesInput>
    createMany?: employeesCreateManyEmployeesInputEnvelope
    set?: Enumerable<employeesWhereUniqueInput>
    disconnect?: Enumerable<employeesWhereUniqueInput>
    delete?: Enumerable<employeesWhereUniqueInput>
    connect?: Enumerable<employeesWhereUniqueInput>
    update?: Enumerable<employeesUpdateWithWhereUniqueWithoutEmployeesInput>
    updateMany?: Enumerable<employeesUpdateManyWithWhereWithoutEmployeesInput>
    deleteMany?: Enumerable<employeesScalarWhereInput>
  }

  export type officesUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<officesCreateWithoutEmployeesInput, officesUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: officesCreateOrConnectWithoutEmployeesInput
    upsert?: officesUpsertWithoutEmployeesInput
    connect?: officesWhereUniqueInput
    update?: XOR<officesUpdateWithoutEmployeesInput, officesUncheckedUpdateWithoutEmployeesInput>
  }

  export type customersUncheckedUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<Enumerable<customersCreateWithoutEmployeesInput>, Enumerable<customersUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<customersCreateOrConnectWithoutEmployeesInput>
    upsert?: Enumerable<customersUpsertWithWhereUniqueWithoutEmployeesInput>
    createMany?: customersCreateManyEmployeesInputEnvelope
    set?: Enumerable<customersWhereUniqueInput>
    disconnect?: Enumerable<customersWhereUniqueInput>
    delete?: Enumerable<customersWhereUniqueInput>
    connect?: Enumerable<customersWhereUniqueInput>
    update?: Enumerable<customersUpdateWithWhereUniqueWithoutEmployeesInput>
    updateMany?: Enumerable<customersUpdateManyWithWhereWithoutEmployeesInput>
    deleteMany?: Enumerable<customersScalarWhereInput>
  }

  export type employeesUncheckedUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<Enumerable<employeesCreateWithoutEmployeesInput>, Enumerable<employeesUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutEmployeesInput>
    upsert?: Enumerable<employeesUpsertWithWhereUniqueWithoutEmployeesInput>
    createMany?: employeesCreateManyEmployeesInputEnvelope
    set?: Enumerable<employeesWhereUniqueInput>
    disconnect?: Enumerable<employeesWhereUniqueInput>
    delete?: Enumerable<employeesWhereUniqueInput>
    connect?: Enumerable<employeesWhereUniqueInput>
    update?: Enumerable<employeesUpdateWithWhereUniqueWithoutEmployeesInput>
    updateMany?: Enumerable<employeesUpdateManyWithWhereWithoutEmployeesInput>
    deleteMany?: Enumerable<employeesScalarWhereInput>
  }

  export type employeesCreateNestedManyWithoutOfficesInput = {
    create?: XOR<Enumerable<employeesCreateWithoutOfficesInput>, Enumerable<employeesUncheckedCreateWithoutOfficesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutOfficesInput>
    createMany?: employeesCreateManyOfficesInputEnvelope
    connect?: Enumerable<employeesWhereUniqueInput>
  }

  export type employeesUncheckedCreateNestedManyWithoutOfficesInput = {
    create?: XOR<Enumerable<employeesCreateWithoutOfficesInput>, Enumerable<employeesUncheckedCreateWithoutOfficesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutOfficesInput>
    createMany?: employeesCreateManyOfficesInputEnvelope
    connect?: Enumerable<employeesWhereUniqueInput>
  }

  export type employeesUpdateManyWithoutOfficesNestedInput = {
    create?: XOR<Enumerable<employeesCreateWithoutOfficesInput>, Enumerable<employeesUncheckedCreateWithoutOfficesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutOfficesInput>
    upsert?: Enumerable<employeesUpsertWithWhereUniqueWithoutOfficesInput>
    createMany?: employeesCreateManyOfficesInputEnvelope
    set?: Enumerable<employeesWhereUniqueInput>
    disconnect?: Enumerable<employeesWhereUniqueInput>
    delete?: Enumerable<employeesWhereUniqueInput>
    connect?: Enumerable<employeesWhereUniqueInput>
    update?: Enumerable<employeesUpdateWithWhereUniqueWithoutOfficesInput>
    updateMany?: Enumerable<employeesUpdateManyWithWhereWithoutOfficesInput>
    deleteMany?: Enumerable<employeesScalarWhereInput>
  }

  export type employeesUncheckedUpdateManyWithoutOfficesNestedInput = {
    create?: XOR<Enumerable<employeesCreateWithoutOfficesInput>, Enumerable<employeesUncheckedCreateWithoutOfficesInput>>
    connectOrCreate?: Enumerable<employeesCreateOrConnectWithoutOfficesInput>
    upsert?: Enumerable<employeesUpsertWithWhereUniqueWithoutOfficesInput>
    createMany?: employeesCreateManyOfficesInputEnvelope
    set?: Enumerable<employeesWhereUniqueInput>
    disconnect?: Enumerable<employeesWhereUniqueInput>
    delete?: Enumerable<employeesWhereUniqueInput>
    connect?: Enumerable<employeesWhereUniqueInput>
    update?: Enumerable<employeesUpdateWithWhereUniqueWithoutOfficesInput>
    updateMany?: Enumerable<employeesUpdateManyWithWhereWithoutOfficesInput>
    deleteMany?: Enumerable<employeesScalarWhereInput>
  }

  export type ordersCreateNestedOneWithoutOrderdetailsInput = {
    create?: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrderdetailsInput
    connect?: ordersWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutOrderdetailsInput = {
    create?: XOR<productsCreateWithoutOrderdetailsInput, productsUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrderdetailsInput
    connect?: productsWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ordersUpdateOneRequiredWithoutOrderdetailsNestedInput = {
    create?: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrderdetailsInput
    upsert?: ordersUpsertWithoutOrderdetailsInput
    connect?: ordersWhereUniqueInput
    update?: XOR<ordersUpdateWithoutOrderdetailsInput, ordersUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type productsUpdateOneRequiredWithoutOrderdetailsNestedInput = {
    create?: XOR<productsCreateWithoutOrderdetailsInput, productsUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrderdetailsInput
    upsert?: productsUpsertWithoutOrderdetailsInput
    connect?: productsWhereUniqueInput
    update?: XOR<productsUpdateWithoutOrderdetailsInput, productsUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type orderdetailsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type customersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: customersCreateOrConnectWithoutOrdersInput
    connect?: customersWhereUniqueInput
  }

  export type orderdetailsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type orderdetailsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutOrdersInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutOrdersInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type customersUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: customersCreateOrConnectWithoutOrdersInput
    upsert?: customersUpsertWithoutOrdersInput
    connect?: customersWhereUniqueInput
    update?: XOR<customersUpdateWithoutOrdersInput, customersUncheckedUpdateWithoutOrdersInput>
  }

  export type orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutOrdersInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutOrdersInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type customersCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<customersCreateWithoutPaymentsInput, customersUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: customersCreateOrConnectWithoutPaymentsInput
    connect?: customersWhereUniqueInput
  }

  export type customersUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<customersCreateWithoutPaymentsInput, customersUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: customersCreateOrConnectWithoutPaymentsInput
    upsert?: customersUpsertWithoutPaymentsInput
    connect?: customersWhereUniqueInput
    update?: XOR<customersUpdateWithoutPaymentsInput, customersUncheckedUpdateWithoutPaymentsInput>
  }

  export type productsCreateNestedManyWithoutProductlinesInput = {
    create?: XOR<Enumerable<productsCreateWithoutProductlinesInput>, Enumerable<productsUncheckedCreateWithoutProductlinesInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutProductlinesInput>
    createMany?: productsCreateManyProductlinesInputEnvelope
    connect?: Enumerable<productsWhereUniqueInput>
  }

  export type productsUncheckedCreateNestedManyWithoutProductlinesInput = {
    create?: XOR<Enumerable<productsCreateWithoutProductlinesInput>, Enumerable<productsUncheckedCreateWithoutProductlinesInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutProductlinesInput>
    createMany?: productsCreateManyProductlinesInputEnvelope
    connect?: Enumerable<productsWhereUniqueInput>
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type productsUpdateManyWithoutProductlinesNestedInput = {
    create?: XOR<Enumerable<productsCreateWithoutProductlinesInput>, Enumerable<productsUncheckedCreateWithoutProductlinesInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutProductlinesInput>
    upsert?: Enumerable<productsUpsertWithWhereUniqueWithoutProductlinesInput>
    createMany?: productsCreateManyProductlinesInputEnvelope
    set?: Enumerable<productsWhereUniqueInput>
    disconnect?: Enumerable<productsWhereUniqueInput>
    delete?: Enumerable<productsWhereUniqueInput>
    connect?: Enumerable<productsWhereUniqueInput>
    update?: Enumerable<productsUpdateWithWhereUniqueWithoutProductlinesInput>
    updateMany?: Enumerable<productsUpdateManyWithWhereWithoutProductlinesInput>
    deleteMany?: Enumerable<productsScalarWhereInput>
  }

  export type productsUncheckedUpdateManyWithoutProductlinesNestedInput = {
    create?: XOR<Enumerable<productsCreateWithoutProductlinesInput>, Enumerable<productsUncheckedCreateWithoutProductlinesInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutProductlinesInput>
    upsert?: Enumerable<productsUpsertWithWhereUniqueWithoutProductlinesInput>
    createMany?: productsCreateManyProductlinesInputEnvelope
    set?: Enumerable<productsWhereUniqueInput>
    disconnect?: Enumerable<productsWhereUniqueInput>
    delete?: Enumerable<productsWhereUniqueInput>
    connect?: Enumerable<productsWhereUniqueInput>
    update?: Enumerable<productsUpdateWithWhereUniqueWithoutProductlinesInput>
    updateMany?: Enumerable<productsUpdateManyWithWhereWithoutProductlinesInput>
    deleteMany?: Enumerable<productsScalarWhereInput>
  }

  export type orderdetailsCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductsInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductsInput>
    createMany?: orderdetailsCreateManyProductsInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type productlinesCreateNestedOneWithoutProductsInput = {
    create?: XOR<productlinesCreateWithoutProductsInput, productlinesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: productlinesCreateOrConnectWithoutProductsInput
    connect?: productlinesWhereUniqueInput
  }

  export type orderdetailsUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductsInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductsInput>
    createMany?: orderdetailsCreateManyProductsInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type orderdetailsUpdateManyWithoutProductsNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductsInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: orderdetailsCreateManyProductsInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type productlinesUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<productlinesCreateWithoutProductsInput, productlinesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: productlinesCreateOrConnectWithoutProductsInput
    upsert?: productlinesUpsertWithoutProductsInput
    connect?: productlinesWhereUniqueInput
    update?: XOR<productlinesUpdateWithoutProductsInput, productlinesUncheckedUpdateWithoutProductsInput>
  }

  export type orderdetailsUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductsInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: orderdetailsCreateManyProductsInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | null
    notIn?: Enumerable<Buffer> | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type NestedBytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | null
    notIn?: Enumerable<Buffer> | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
  }

  export type employeesCreateWithoutCustomersInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    jobTitle: string
    employees?: employeesCreateNestedOneWithoutOther_employeesInput
    other_employees?: employeesCreateNestedManyWithoutEmployeesInput
    offices: officesCreateNestedOneWithoutEmployeesInput
  }

  export type employeesUncheckedCreateWithoutCustomersInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    officeCode: string
    reportsTo?: number | null
    jobTitle: string
    other_employees?: employeesUncheckedCreateNestedManyWithoutEmployeesInput
  }

  export type employeesCreateOrConnectWithoutCustomersInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutCustomersInput, employeesUncheckedCreateWithoutCustomersInput>
  }

  export type ordersCreateWithoutCustomersInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
    orderdetails?: orderdetailsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutCustomersInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutCustomersInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput>
  }

  export type ordersCreateManyCustomersInputEnvelope = {
    data: Enumerable<ordersCreateManyCustomersInput>
    skipDuplicates?: boolean
  }

  export type paymentsCreateWithoutCustomersInput = {
    checkNumber: string
    paymentDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
  }

  export type paymentsUncheckedCreateWithoutCustomersInput = {
    checkNumber: string
    paymentDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
  }

  export type paymentsCreateOrConnectWithoutCustomersInput = {
    where: paymentsWhereUniqueInput
    create: XOR<paymentsCreateWithoutCustomersInput, paymentsUncheckedCreateWithoutCustomersInput>
  }

  export type paymentsCreateManyCustomersInputEnvelope = {
    data: Enumerable<paymentsCreateManyCustomersInput>
    skipDuplicates?: boolean
  }

  export type employeesUpsertWithoutCustomersInput = {
    update: XOR<employeesUpdateWithoutCustomersInput, employeesUncheckedUpdateWithoutCustomersInput>
    create: XOR<employeesCreateWithoutCustomersInput, employeesUncheckedCreateWithoutCustomersInput>
  }

  export type employeesUpdateWithoutCustomersInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    employees?: employeesUpdateOneWithoutOther_employeesNestedInput
    other_employees?: employeesUpdateManyWithoutEmployeesNestedInput
    offices?: officesUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type employeesUncheckedUpdateWithoutCustomersInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    officeCode?: StringFieldUpdateOperationsInput | string
    reportsTo?: NullableIntFieldUpdateOperationsInput | number | null
    jobTitle?: StringFieldUpdateOperationsInput | string
    other_employees?: employeesUncheckedUpdateManyWithoutEmployeesNestedInput
  }

  export type ordersUpsertWithWhereUniqueWithoutCustomersInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutCustomersInput, ordersUncheckedUpdateWithoutCustomersInput>
    create: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutCustomersInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutCustomersInput, ordersUncheckedUpdateWithoutCustomersInput>
  }

  export type ordersUpdateManyWithWhereWithoutCustomersInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type ordersScalarWhereInput = {
    AND?: Enumerable<ordersScalarWhereInput>
    OR?: Enumerable<ordersScalarWhereInput>
    NOT?: Enumerable<ordersScalarWhereInput>
    orderNumber?: IntFilter | number
    orderDate?: DateTimeFilter | Date | string
    requiredDate?: DateTimeFilter | Date | string
    shippedDate?: DateTimeNullableFilter | Date | string | null
    status?: StringFilter | string
    comments?: StringNullableFilter | string | null
    customerNumber?: IntFilter | number
  }

  export type paymentsUpsertWithWhereUniqueWithoutCustomersInput = {
    where: paymentsWhereUniqueInput
    update: XOR<paymentsUpdateWithoutCustomersInput, paymentsUncheckedUpdateWithoutCustomersInput>
    create: XOR<paymentsCreateWithoutCustomersInput, paymentsUncheckedCreateWithoutCustomersInput>
  }

  export type paymentsUpdateWithWhereUniqueWithoutCustomersInput = {
    where: paymentsWhereUniqueInput
    data: XOR<paymentsUpdateWithoutCustomersInput, paymentsUncheckedUpdateWithoutCustomersInput>
  }

  export type paymentsUpdateManyWithWhereWithoutCustomersInput = {
    where: paymentsScalarWhereInput
    data: XOR<paymentsUpdateManyMutationInput, paymentsUncheckedUpdateManyWithoutPaymentsInput>
  }

  export type paymentsScalarWhereInput = {
    AND?: Enumerable<paymentsScalarWhereInput>
    OR?: Enumerable<paymentsScalarWhereInput>
    NOT?: Enumerable<paymentsScalarWhereInput>
    customerNumber?: IntFilter | number
    checkNumber?: StringFilter | string
    paymentDate?: DateTimeFilter | Date | string
    amount?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type customersCreateWithoutEmployeesInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersCreateNestedManyWithoutCustomersInput
    payments?: paymentsCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutEmployeesInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutCustomersInput
    payments?: paymentsUncheckedCreateNestedManyWithoutCustomersInput
  }

  export type customersCreateOrConnectWithoutEmployeesInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutEmployeesInput, customersUncheckedCreateWithoutEmployeesInput>
  }

  export type customersCreateManyEmployeesInputEnvelope = {
    data: Enumerable<customersCreateManyEmployeesInput>
    skipDuplicates?: boolean
  }

  export type employeesCreateWithoutOther_employeesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    jobTitle: string
    customers?: customersCreateNestedManyWithoutEmployeesInput
    employees?: employeesCreateNestedOneWithoutOther_employeesInput
    offices: officesCreateNestedOneWithoutEmployeesInput
  }

  export type employeesUncheckedCreateWithoutOther_employeesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    officeCode: string
    reportsTo?: number | null
    jobTitle: string
    customers?: customersUncheckedCreateNestedManyWithoutEmployeesInput
  }

  export type employeesCreateOrConnectWithoutOther_employeesInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutOther_employeesInput, employeesUncheckedCreateWithoutOther_employeesInput>
  }

  export type employeesCreateWithoutEmployeesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    jobTitle: string
    customers?: customersCreateNestedManyWithoutEmployeesInput
    other_employees?: employeesCreateNestedManyWithoutEmployeesInput
    offices: officesCreateNestedOneWithoutEmployeesInput
  }

  export type employeesUncheckedCreateWithoutEmployeesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    officeCode: string
    jobTitle: string
    customers?: customersUncheckedCreateNestedManyWithoutEmployeesInput
    other_employees?: employeesUncheckedCreateNestedManyWithoutEmployeesInput
  }

  export type employeesCreateOrConnectWithoutEmployeesInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutEmployeesInput, employeesUncheckedCreateWithoutEmployeesInput>
  }

  export type employeesCreateManyEmployeesInputEnvelope = {
    data: Enumerable<employeesCreateManyEmployeesInput>
    skipDuplicates?: boolean
  }

  export type officesCreateWithoutEmployeesInput = {
    officeCode: string
    city: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    state?: string | null
    country: string
    postalCode: string
    territory: string
  }

  export type officesUncheckedCreateWithoutEmployeesInput = {
    officeCode: string
    city: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    state?: string | null
    country: string
    postalCode: string
    territory: string
  }

  export type officesCreateOrConnectWithoutEmployeesInput = {
    where: officesWhereUniqueInput
    create: XOR<officesCreateWithoutEmployeesInput, officesUncheckedCreateWithoutEmployeesInput>
  }

  export type customersUpsertWithWhereUniqueWithoutEmployeesInput = {
    where: customersWhereUniqueInput
    update: XOR<customersUpdateWithoutEmployeesInput, customersUncheckedUpdateWithoutEmployeesInput>
    create: XOR<customersCreateWithoutEmployeesInput, customersUncheckedCreateWithoutEmployeesInput>
  }

  export type customersUpdateWithWhereUniqueWithoutEmployeesInput = {
    where: customersWhereUniqueInput
    data: XOR<customersUpdateWithoutEmployeesInput, customersUncheckedUpdateWithoutEmployeesInput>
  }

  export type customersUpdateManyWithWhereWithoutEmployeesInput = {
    where: customersScalarWhereInput
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyWithoutCustomersInput>
  }

  export type customersScalarWhereInput = {
    AND?: Enumerable<customersScalarWhereInput>
    OR?: Enumerable<customersScalarWhereInput>
    NOT?: Enumerable<customersScalarWhereInput>
    customerNumber?: IntFilter | number
    customerName?: StringFilter | string
    contactLastName?: StringFilter | string
    contactFirstName?: StringFilter | string
    phone?: StringFilter | string
    addressLine1?: StringFilter | string
    addressLine2?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringNullableFilter | string | null
    postalCode?: StringNullableFilter | string | null
    country?: StringFilter | string
    salesRepEmployeeNumber?: IntNullableFilter | number | null
    creditLimit?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type employeesUpsertWithoutOther_employeesInput = {
    update: XOR<employeesUpdateWithoutOther_employeesInput, employeesUncheckedUpdateWithoutOther_employeesInput>
    create: XOR<employeesCreateWithoutOther_employeesInput, employeesUncheckedCreateWithoutOther_employeesInput>
  }

  export type employeesUpdateWithoutOther_employeesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUpdateManyWithoutEmployeesNestedInput
    employees?: employeesUpdateOneWithoutOther_employeesNestedInput
    offices?: officesUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type employeesUncheckedUpdateWithoutOther_employeesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    officeCode?: StringFieldUpdateOperationsInput | string
    reportsTo?: NullableIntFieldUpdateOperationsInput | number | null
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUncheckedUpdateManyWithoutEmployeesNestedInput
  }

  export type employeesUpsertWithWhereUniqueWithoutEmployeesInput = {
    where: employeesWhereUniqueInput
    update: XOR<employeesUpdateWithoutEmployeesInput, employeesUncheckedUpdateWithoutEmployeesInput>
    create: XOR<employeesCreateWithoutEmployeesInput, employeesUncheckedCreateWithoutEmployeesInput>
  }

  export type employeesUpdateWithWhereUniqueWithoutEmployeesInput = {
    where: employeesWhereUniqueInput
    data: XOR<employeesUpdateWithoutEmployeesInput, employeesUncheckedUpdateWithoutEmployeesInput>
  }

  export type employeesUpdateManyWithWhereWithoutEmployeesInput = {
    where: employeesScalarWhereInput
    data: XOR<employeesUpdateManyMutationInput, employeesUncheckedUpdateManyWithoutOther_employeesInput>
  }

  export type employeesScalarWhereInput = {
    AND?: Enumerable<employeesScalarWhereInput>
    OR?: Enumerable<employeesScalarWhereInput>
    NOT?: Enumerable<employeesScalarWhereInput>
    employeeNumber?: IntFilter | number
    lastName?: StringFilter | string
    firstName?: StringFilter | string
    extension?: StringFilter | string
    email?: StringFilter | string
    officeCode?: StringFilter | string
    reportsTo?: IntNullableFilter | number | null
    jobTitle?: StringFilter | string
  }

  export type officesUpsertWithoutEmployeesInput = {
    update: XOR<officesUpdateWithoutEmployeesInput, officesUncheckedUpdateWithoutEmployeesInput>
    create: XOR<officesCreateWithoutEmployeesInput, officesUncheckedCreateWithoutEmployeesInput>
  }

  export type officesUpdateWithoutEmployeesInput = {
    officeCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    territory?: StringFieldUpdateOperationsInput | string
  }

  export type officesUncheckedUpdateWithoutEmployeesInput = {
    officeCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    territory?: StringFieldUpdateOperationsInput | string
  }

  export type employeesCreateWithoutOfficesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    jobTitle: string
    customers?: customersCreateNestedManyWithoutEmployeesInput
    employees?: employeesCreateNestedOneWithoutOther_employeesInput
    other_employees?: employeesCreateNestedManyWithoutEmployeesInput
  }

  export type employeesUncheckedCreateWithoutOfficesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    reportsTo?: number | null
    jobTitle: string
    customers?: customersUncheckedCreateNestedManyWithoutEmployeesInput
    other_employees?: employeesUncheckedCreateNestedManyWithoutEmployeesInput
  }

  export type employeesCreateOrConnectWithoutOfficesInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutOfficesInput, employeesUncheckedCreateWithoutOfficesInput>
  }

  export type employeesCreateManyOfficesInputEnvelope = {
    data: Enumerable<employeesCreateManyOfficesInput>
    skipDuplicates?: boolean
  }

  export type employeesUpsertWithWhereUniqueWithoutOfficesInput = {
    where: employeesWhereUniqueInput
    update: XOR<employeesUpdateWithoutOfficesInput, employeesUncheckedUpdateWithoutOfficesInput>
    create: XOR<employeesCreateWithoutOfficesInput, employeesUncheckedCreateWithoutOfficesInput>
  }

  export type employeesUpdateWithWhereUniqueWithoutOfficesInput = {
    where: employeesWhereUniqueInput
    data: XOR<employeesUpdateWithoutOfficesInput, employeesUncheckedUpdateWithoutOfficesInput>
  }

  export type employeesUpdateManyWithWhereWithoutOfficesInput = {
    where: employeesScalarWhereInput
    data: XOR<employeesUpdateManyMutationInput, employeesUncheckedUpdateManyWithoutEmployeesInput>
  }

  export type ordersCreateWithoutOrderdetailsInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
    customers: customersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutOrderdetailsInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
    customerNumber: number
  }

  export type ordersCreateOrConnectWithoutOrderdetailsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
  }

  export type productsCreateWithoutOrderdetailsInput = {
    productCode: string
    productName: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
    productlines: productlinesCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutOrderdetailsInput = {
    productCode: string
    productName: string
    productLine: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
  }

  export type productsCreateOrConnectWithoutOrderdetailsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOrderdetailsInput, productsUncheckedCreateWithoutOrderdetailsInput>
  }

  export type ordersUpsertWithoutOrderdetailsInput = {
    update: XOR<ordersUpdateWithoutOrderdetailsInput, ordersUncheckedUpdateWithoutOrderdetailsInput>
    create: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
  }

  export type ordersUpdateWithoutOrderdetailsInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: customersUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutOrderdetailsInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    customerNumber?: IntFieldUpdateOperationsInput | number
  }

  export type productsUpsertWithoutOrderdetailsInput = {
    update: XOR<productsUpdateWithoutOrderdetailsInput, productsUncheckedUpdateWithoutOrderdetailsInput>
    create: XOR<productsCreateWithoutOrderdetailsInput, productsUncheckedCreateWithoutOrderdetailsInput>
  }

  export type productsUpdateWithoutOrderdetailsInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productlines?: productlinesUpdateOneRequiredWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutOrderdetailsInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productLine?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type orderdetailsCreateWithoutOrdersInput = {
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
    products: productsCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailsUncheckedCreateWithoutOrdersInput = {
    productCode: string
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
  }

  export type orderdetailsCreateOrConnectWithoutOrdersInput = {
    where: orderdetailsWhereUniqueInput
    create: XOR<orderdetailsCreateWithoutOrdersInput, orderdetailsUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailsCreateManyOrdersInputEnvelope = {
    data: Enumerable<orderdetailsCreateManyOrdersInput>
    skipDuplicates?: boolean
  }

  export type customersCreateWithoutOrdersInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    employees?: employeesCreateNestedOneWithoutCustomersInput
    payments?: paymentsCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutOrdersInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    salesRepEmployeeNumber?: number | null
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    payments?: paymentsUncheckedCreateNestedManyWithoutCustomersInput
  }

  export type customersCreateOrConnectWithoutOrdersInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: orderdetailsWhereUniqueInput
    update: XOR<orderdetailsUpdateWithoutOrdersInput, orderdetailsUncheckedUpdateWithoutOrdersInput>
    create: XOR<orderdetailsCreateWithoutOrdersInput, orderdetailsUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: orderdetailsWhereUniqueInput
    data: XOR<orderdetailsUpdateWithoutOrdersInput, orderdetailsUncheckedUpdateWithoutOrdersInput>
  }

  export type orderdetailsUpdateManyWithWhereWithoutOrdersInput = {
    where: orderdetailsScalarWhereInput
    data: XOR<orderdetailsUpdateManyMutationInput, orderdetailsUncheckedUpdateManyWithoutOrderdetailsInput>
  }

  export type orderdetailsScalarWhereInput = {
    AND?: Enumerable<orderdetailsScalarWhereInput>
    OR?: Enumerable<orderdetailsScalarWhereInput>
    NOT?: Enumerable<orderdetailsScalarWhereInput>
    orderNumber?: IntFilter | number
    productCode?: StringFilter | string
    quantityOrdered?: IntFilter | number
    priceEach?: DecimalFilter | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFilter | number
  }

  export type customersUpsertWithoutOrdersInput = {
    update: XOR<customersUpdateWithoutOrdersInput, customersUncheckedUpdateWithoutOrdersInput>
    create: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
  }

  export type customersUpdateWithoutOrdersInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    employees?: employeesUpdateOneWithoutCustomersNestedInput
    payments?: paymentsUpdateManyWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateWithoutOrdersInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    salesRepEmployeeNumber?: NullableIntFieldUpdateOperationsInput | number | null
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    payments?: paymentsUncheckedUpdateManyWithoutCustomersNestedInput
  }

  export type customersCreateWithoutPaymentsInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    employees?: employeesCreateNestedOneWithoutCustomersInput
    orders?: ordersCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutPaymentsInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    salesRepEmployeeNumber?: number | null
    creditLimit?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutCustomersInput
  }

  export type customersCreateOrConnectWithoutPaymentsInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutPaymentsInput, customersUncheckedCreateWithoutPaymentsInput>
  }

  export type customersUpsertWithoutPaymentsInput = {
    update: XOR<customersUpdateWithoutPaymentsInput, customersUncheckedUpdateWithoutPaymentsInput>
    create: XOR<customersCreateWithoutPaymentsInput, customersUncheckedCreateWithoutPaymentsInput>
  }

  export type customersUpdateWithoutPaymentsInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    employees?: employeesUpdateOneWithoutCustomersNestedInput
    orders?: ordersUpdateManyWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateWithoutPaymentsInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    salesRepEmployeeNumber?: NullableIntFieldUpdateOperationsInput | number | null
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedUpdateManyWithoutCustomersNestedInput
  }

  export type productsCreateWithoutProductlinesInput = {
    productCode: string
    productName: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProductlinesInput = {
    productCode: string
    productName: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProductlinesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProductlinesInput, productsUncheckedCreateWithoutProductlinesInput>
  }

  export type productsCreateManyProductlinesInputEnvelope = {
    data: Enumerable<productsCreateManyProductlinesInput>
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutProductlinesInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutProductlinesInput, productsUncheckedUpdateWithoutProductlinesInput>
    create: XOR<productsCreateWithoutProductlinesInput, productsUncheckedCreateWithoutProductlinesInput>
  }

  export type productsUpdateWithWhereUniqueWithoutProductlinesInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutProductlinesInput, productsUncheckedUpdateWithoutProductlinesInput>
  }

  export type productsUpdateManyWithWhereWithoutProductlinesInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutProductsInput>
  }

  export type productsScalarWhereInput = {
    AND?: Enumerable<productsScalarWhereInput>
    OR?: Enumerable<productsScalarWhereInput>
    NOT?: Enumerable<productsScalarWhereInput>
    productCode?: StringFilter | string
    productName?: StringFilter | string
    productLine?: StringFilter | string
    productScale?: StringFilter | string
    productVendor?: StringFilter | string
    productDescription?: StringFilter | string
    quantityInStock?: IntFilter | number
    buyPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type orderdetailsCreateWithoutProductsInput = {
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
    orders: ordersCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailsUncheckedCreateWithoutProductsInput = {
    orderNumber: number
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
  }

  export type orderdetailsCreateOrConnectWithoutProductsInput = {
    where: orderdetailsWhereUniqueInput
    create: XOR<orderdetailsCreateWithoutProductsInput, orderdetailsUncheckedCreateWithoutProductsInput>
  }

  export type orderdetailsCreateManyProductsInputEnvelope = {
    data: Enumerable<orderdetailsCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type productlinesCreateWithoutProductsInput = {
    productLine: string
    textDescription?: string | null
    htmlDescription?: string | null
    image?: Buffer | null
  }

  export type productlinesUncheckedCreateWithoutProductsInput = {
    productLine: string
    textDescription?: string | null
    htmlDescription?: string | null
    image?: Buffer | null
  }

  export type productlinesCreateOrConnectWithoutProductsInput = {
    where: productlinesWhereUniqueInput
    create: XOR<productlinesCreateWithoutProductsInput, productlinesUncheckedCreateWithoutProductsInput>
  }

  export type orderdetailsUpsertWithWhereUniqueWithoutProductsInput = {
    where: orderdetailsWhereUniqueInput
    update: XOR<orderdetailsUpdateWithoutProductsInput, orderdetailsUncheckedUpdateWithoutProductsInput>
    create: XOR<orderdetailsCreateWithoutProductsInput, orderdetailsUncheckedCreateWithoutProductsInput>
  }

  export type orderdetailsUpdateWithWhereUniqueWithoutProductsInput = {
    where: orderdetailsWhereUniqueInput
    data: XOR<orderdetailsUpdateWithoutProductsInput, orderdetailsUncheckedUpdateWithoutProductsInput>
  }

  export type orderdetailsUpdateManyWithWhereWithoutProductsInput = {
    where: orderdetailsScalarWhereInput
    data: XOR<orderdetailsUpdateManyMutationInput, orderdetailsUncheckedUpdateManyWithoutOrderdetailsInput>
  }

  export type productlinesUpsertWithoutProductsInput = {
    update: XOR<productlinesUpdateWithoutProductsInput, productlinesUncheckedUpdateWithoutProductsInput>
    create: XOR<productlinesCreateWithoutProductsInput, productlinesUncheckedCreateWithoutProductsInput>
  }

  export type productlinesUpdateWithoutProductsInput = {
    productLine?: StringFieldUpdateOperationsInput | string
    textDescription?: NullableStringFieldUpdateOperationsInput | string | null
    htmlDescription?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type productlinesUncheckedUpdateWithoutProductsInput = {
    productLine?: StringFieldUpdateOperationsInput | string
    textDescription?: NullableStringFieldUpdateOperationsInput | string | null
    htmlDescription?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type ordersCreateManyCustomersInput = {
    orderNumber: number
    orderDate: Date | string
    requiredDate: Date | string
    shippedDate?: Date | string | null
    status: string
    comments?: string | null
  }

  export type paymentsCreateManyCustomersInput = {
    checkNumber: string
    paymentDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
  }

  export type ordersUpdateWithoutCustomersInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    orderdetails?: orderdetailsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutCustomersInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutOrdersInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredDate?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type paymentsUpdateWithoutCustomersInput = {
    checkNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type paymentsUncheckedUpdateWithoutCustomersInput = {
    checkNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type paymentsUncheckedUpdateManyWithoutPaymentsInput = {
    checkNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type customersCreateManyEmployeesInput = {
    customerNumber: number
    customerName: string
    contactLastName: string
    contactFirstName: string
    phone: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state?: string | null
    postalCode?: string | null
    country: string
    creditLimit?: Decimal | DecimalJsLike | number | string | null
  }

  export type employeesCreateManyEmployeesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    officeCode: string
    jobTitle: string
  }

  export type customersUpdateWithoutEmployeesInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUpdateManyWithoutCustomersNestedInput
    payments?: paymentsUpdateManyWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateWithoutEmployeesInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedUpdateManyWithoutCustomersNestedInput
    payments?: paymentsUncheckedUpdateManyWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateManyWithoutCustomersInput = {
    customerNumber?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    contactLastName?: StringFieldUpdateOperationsInput | string
    contactFirstName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    creditLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type employeesUpdateWithoutEmployeesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUpdateManyWithoutEmployeesNestedInput
    other_employees?: employeesUpdateManyWithoutEmployeesNestedInput
    offices?: officesUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type employeesUncheckedUpdateWithoutEmployeesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    officeCode?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUncheckedUpdateManyWithoutEmployeesNestedInput
    other_employees?: employeesUncheckedUpdateManyWithoutEmployeesNestedInput
  }

  export type employeesUncheckedUpdateManyWithoutOther_employeesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    officeCode?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type employeesCreateManyOfficesInput = {
    employeeNumber: number
    lastName: string
    firstName: string
    extension: string
    email: string
    reportsTo?: number | null
    jobTitle: string
  }

  export type employeesUpdateWithoutOfficesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUpdateManyWithoutEmployeesNestedInput
    employees?: employeesUpdateOneWithoutOther_employeesNestedInput
    other_employees?: employeesUpdateManyWithoutEmployeesNestedInput
  }

  export type employeesUncheckedUpdateWithoutOfficesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reportsTo?: NullableIntFieldUpdateOperationsInput | number | null
    jobTitle?: StringFieldUpdateOperationsInput | string
    customers?: customersUncheckedUpdateManyWithoutEmployeesNestedInput
    other_employees?: employeesUncheckedUpdateManyWithoutEmployeesNestedInput
  }

  export type employeesUncheckedUpdateManyWithoutEmployeesInput = {
    employeeNumber?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    extension?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reportsTo?: NullableIntFieldUpdateOperationsInput | number | null
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type orderdetailsCreateManyOrdersInput = {
    productCode: string
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
  }

  export type orderdetailsUpdateWithoutOrdersInput = {
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
    products?: productsUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailsUncheckedUpdateWithoutOrdersInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
  }

  export type orderdetailsUncheckedUpdateManyWithoutOrderdetailsInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
  }

  export type productsCreateManyProductlinesInput = {
    productCode: string
    productName: string
    productScale: string
    productVendor: string
    productDescription: string
    quantityInStock: number
    buyPrice: Decimal | DecimalJsLike | number | string
    MSRP: Decimal | DecimalJsLike | number | string
  }

  export type productsUpdateWithoutProductlinesInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProductlinesInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutProductsInput = {
    productCode?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productScale?: StringFieldUpdateOperationsInput | string
    productVendor?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    quantityInStock?: IntFieldUpdateOperationsInput | number
    buyPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    MSRP?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type orderdetailsCreateManyProductsInput = {
    orderNumber: number
    quantityOrdered: number
    priceEach: Decimal | DecimalJsLike | number | string
    orderLineNumber: number
  }

  export type orderdetailsUpdateWithoutProductsInput = {
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
    orders?: ordersUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailsUncheckedUpdateWithoutProductsInput = {
    orderNumber?: IntFieldUpdateOperationsInput | number
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    priceEach?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderLineNumber?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}