
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.12.0
 * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
 */
Prisma.prismaVersion = {
  client: "4.12.0",
  engine: "659ef412370fa3b41cd7bf6e94587c1dfb7f67e7"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CustomersScalarFieldEnum = makeEnum({
  customerNumber: 'customerNumber',
  customerName: 'customerName',
  contactLastName: 'contactLastName',
  contactFirstName: 'contactFirstName',
  phone: 'phone',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  salesRepEmployeeNumber: 'salesRepEmployeeNumber',
  creditLimit: 'creditLimit'
});

exports.Prisma.EmployeesScalarFieldEnum = makeEnum({
  employeeNumber: 'employeeNumber',
  lastName: 'lastName',
  firstName: 'firstName',
  extension: 'extension',
  email: 'email',
  officeCode: 'officeCode',
  reportsTo: 'reportsTo',
  jobTitle: 'jobTitle'
});

exports.Prisma.OfficesScalarFieldEnum = makeEnum({
  officeCode: 'officeCode',
  city: 'city',
  phone: 'phone',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  territory: 'territory'
});

exports.Prisma.OrderdetailsScalarFieldEnum = makeEnum({
  orderNumber: 'orderNumber',
  productCode: 'productCode',
  quantityOrdered: 'quantityOrdered',
  priceEach: 'priceEach',
  orderLineNumber: 'orderLineNumber'
});

exports.Prisma.OrdersScalarFieldEnum = makeEnum({
  orderNumber: 'orderNumber',
  orderDate: 'orderDate',
  requiredDate: 'requiredDate',
  shippedDate: 'shippedDate',
  status: 'status',
  comments: 'comments',
  customerNumber: 'customerNumber'
});

exports.Prisma.PaymentsScalarFieldEnum = makeEnum({
  customerNumber: 'customerNumber',
  checkNumber: 'checkNumber',
  paymentDate: 'paymentDate',
  amount: 'amount'
});

exports.Prisma.ProductlinesScalarFieldEnum = makeEnum({
  productLine: 'productLine',
  textDescription: 'textDescription',
  htmlDescription: 'htmlDescription',
  image: 'image'
});

exports.Prisma.ProductsScalarFieldEnum = makeEnum({
  productCode: 'productCode',
  productName: 'productName',
  productLine: 'productLine',
  productScale: 'productScale',
  productVendor: 'productVendor',
  productDescription: 'productDescription',
  quantityInStock: 'quantityInStock',
  buyPrice: 'buyPrice',
  MSRP: 'MSRP'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.Temp_orderdetailsScalarFieldEnum = makeEnum({
  orderLineNumber: 'orderLineNumber',
  orderNumber: 'orderNumber',
  priceEach: 'priceEach',
  productCode: 'productCode',
  quantityOrdered: 'quantityOrdered'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});


exports.Prisma.ModelName = makeEnum({
  customers: 'customers',
  employees: 'employees',
  offices: 'offices',
  orderdetails: 'orderdetails',
  orders: 'orders',
  payments: 'payments',
  productlines: 'productlines',
  products: 'products',
  temp_orderdetails: 'temp_orderdetails'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
